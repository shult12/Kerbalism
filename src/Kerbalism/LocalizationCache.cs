using System.Collections.Generic;
using KSP.Localization;
using Lingoona;
using System.Text.RegularExpressions;
using System;
using System.Reflection;

/*
HOW TO USE THIS :

The local class contains all the localized strings of Kerbalism core.
You can define parameterless fields and parametrized fields in the Local class, then use them from other places.
Then use the LocalHelpers class to auto-generate the localization configs based on the contents of the Local class
IMPORTANT : For that to work, it is imperative that you add the english localization string in quotations marks as a comment after the field defintion.
You can define either a plain string or a parametrized field.

Plain string example :
>> public static string Mycategory_MyField = GetLoc("Mycategory_MyField"); // "Science"
This will autogenerate the following line for the en_us config :
>> #KERBALISM_Mycategory_MyField = Science
And you can get it from the code with :
>> Local.Mycategory_MyField

Parametrized field example :
>> public static ParamString Mycategory_MyField = new ParamString("Mycategory_MyField"); // "Getting <<1>> at <<2>>"
This will autogenerate the following line for the en_us config :
>> #KERBALISM_Mycategory_MyField = Getting <<1>> at <<2>>
And you can get it from the code with :
>> Local.Mycategory_MyField.Format("some data", "4 ko/s"); // will output "Getting some data at 4 ko/s"

IMPORTANT NOTE :

localization strings used in KSP attributes don't use the localization cache because
they need to be known at compile time. But since every localized string has to be in this file
for the automatic generation done here to work, they still need to be added to the Local class.

Example, if you want to do :
>> [KSPField(guiActive = true, guiName = "#KERBALISM_MyModule_MyFieldName")]
>> public string myfield;

you need to add in the Local class :
>> public static string MyModule_MyFieldName = GetLoc("MyModule_MyFieldName"); // "myFieldName"
*/

namespace KERBALISM
{
	static class LocalHelpers
	{
		// change this to the full path of the LocalizationCache.cs source file
		const string PathToLocalizationCache = @"C:\Users\Got\source\repos\Kerbalism\Kerbalism\src\Kerbalism\LocalizationCache.cs";

		// set this to true (and change the path) to generate on KSP startup
		// the english localization file based on the contents of LocalizationCache.cs
		// IMPORTANT : don't let this to true when commiting
		internal static bool GenerateEnglishLoc = false;
		const string PathToEnglishLocOutput = @"C:\Users\Got\Desktop\loctest\en-us.cfg";

		// set this to true (and change the paths) to generate on KSP startup
		// the non-english localization file based on the contents of LocalizationCache.cs
		// and an existing (partial) localization file
		// untranslated strings will have the comment // UNTRANSLATED
		// IMPORTANT : don't let this to true when commiting
		internal static bool UpdateNonEnglishLoc = false;
		const string locLanguage = "ru";
		const string PathToExistingNonEnglishLoc = @"C:\Users\Got\source\repos\Kerbalism\Kerbalism\GameData\Kerbalism\Localization\" + locLanguage + ".cfg";
		const string PathToNonEnglishLocOutput = @"C:\Users\Got\Desktop\loctest\" + locLanguage + ".cfg";

		internal static void GenerateLoc(bool template = false)
		{
			string[] localCachelines = System.IO.File.ReadAllLines(PathToLocalizationCache);
			List<string> locFile = new List<string>();
			locFile.Add("//////////////////////////////////////////////////////////////////////////////////////");
			locFile.Add("// NEVER EDIT THIS CFG FILE MANUALLY, IT IS AUTOGENERATED.");
			locFile.Add("// CHANGES MUST BE DONE IN THE CODE, INSIDE THE `Local` CLASS (LocalizationCache.cs)");
			locFile.Add("//////////////////////////////////////////////////////////////////////////////////////");
			locFile.Add("");
			locFile.Add("Localization");
			locFile.Add("{");
			locFile.Add("  en-us");
			locFile.Add("  {");

			bool classFound = false;
			string startString = "START" + "OFLOCALIZATION";
			foreach (string line in localCachelines)
			{
				if (!classFound)
				{
					if (line.Contains(startString)) classFound = true;
					continue;
				}

				// public static string (.*?) = GetLoc.*//.*?"(.*)"
				Match locMatch = Regex.Match(line, "public static string (.*?) = GetLoc.*//.*?\"(.*)\"");
				if (locMatch.Success)
				{
					if (!template)
						locFile.Add("    #KERBALISM_" + locMatch.Groups[1].Value + " = " + locMatch.Groups[2].Value);
					else
						locFile.Add("    #KERBALISM_" + locMatch.Groups[1].Value + " = " + "// \"" + locMatch.Groups[2].Value + "\"");

					continue;
				}

				// public static ParamString.*\("(.*?)".*//.*?"(.*)"
				Match parameterLocMatch = Regex.Match(line, "public static ParamString.*\\(\"(.*?)\".*//.*?\"(.*)\"");
				if (parameterLocMatch.Success)
				{
					if (!template)
						locFile.Add("    #KERBALISM_" + parameterLocMatch.Groups[1].Value + " = " + parameterLocMatch.Groups[2].Value);
					else
						locFile.Add("    #KERBALISM_" + parameterLocMatch.Groups[1].Value + " = " + "// \"" + parameterLocMatch.Groups[2].Value + "\"");
					continue;
				}

				// .*(//.*)
				Match commentMatch = Regex.Match(line, ".*(//.*)");
				if (commentMatch.Success)
				{
					locFile.Add("    " + commentMatch.Groups[1].Value);
					continue;
				}
			}

			locFile.Add("  }");
			locFile.Add("}");

			System.IO.File.WriteAllLines(PathToEnglishLocOutput, locFile.ToArray());
		}

		internal static void RegenerateNonEnglishLoc()
		{
			string[] existingLocLines = System.IO.File.ReadAllLines(PathToExistingNonEnglishLoc);
			Dictionary<string, string> foreignLocs = new Dictionary<string, string>();

			foreach (string line in existingLocLines)
			{
				// #KERBALISM_(.*?) = (.*?)(?=//|$)
				Match locMatch = Regex.Match(line, "#KERBALISM_(.*?) = (.*?)(?=//|$)");
				if (locMatch.Success)
				{
					if (!foreignLocs.ContainsKey(locMatch.Groups[1].Value))
					{
						foreignLocs.Add(locMatch.Groups[1].Value, locMatch.Groups[2].Value.Trim());
					}
				}
			}

			string[] englishLocLines = System.IO.File.ReadAllLines(PathToLocalizationCache);
			List<string> outputLoc = new List<string>();
			outputLoc.Add("//////////////////////////////////////////////////////////////////////////////////////");
			outputLoc.Add("// NON-ENGLISH LOCALIZATIONS CAN BE UPDATED MANUALLY BASED ON THE en-us.cfg FILE OR");
			outputLoc.Add("// IF YOU CAN BUILD KERBALISM, SEE LocalizationCache.cs TO GENERATE THE MISSING STRINGS");
			outputLoc.Add("//////////////////////////////////////////////////////////////////////////////////////");
			outputLoc.Add("Localization");
			outputLoc.Add("{");
			outputLoc.Add("  " + locLanguage);
			outputLoc.Add("  {");

			bool classFound = false;
			string startString = "START" + "OFLOCALIZATION";
			foreach (string line in englishLocLines)
			{
				if (!classFound)
				{
					if (line.Contains(startString)) classFound = true;
					continue;
				}

				// public static string (.*?) = GetLoc.*//.*?"(.*)"
				Match locMatch = Regex.Match(line, "public static string (.*?) = GetLoc.*//.*?\"(.*)\"");
				if (locMatch.Success)
				{
					string loc;
					if (!foreignLocs.TryGetValue(locMatch.Groups[1].Value, out loc))
						loc = locMatch.Groups[2].Value + @" // UNTRANSLATED";
					else
						loc += " // \"" + locMatch.Groups[2].Value + "\"";

					outputLoc.Add("    #KERBALISM_" + locMatch.Groups[1].Value + " = " + loc);

					continue;
				}

				// public static ParamString.*\("(.*?)".*//.*?"(.*)"
				Match parameterLocMatch = Regex.Match(line, "public static ParamString.*\\(\"(.*?)\".*//.*?\"(.*)\"");
				if (parameterLocMatch.Success)
				{
					string loc;
					if (!foreignLocs.TryGetValue(parameterLocMatch.Groups[1].Value, out loc))
						loc = parameterLocMatch.Groups[2].Value + @" // UNTRANSLATED";
					else
						loc += " // \"" + parameterLocMatch.Groups[2].Value + "\"";

					outputLoc.Add("    #KERBALISM_" + parameterLocMatch.Groups[1].Value + " = " + loc);

					continue;
				}

				// .*(//.*)
				Match commentMatch = Regex.Match(line, ".*(//.*)");
				if (commentMatch.Success)
				{
					outputLoc.Add("    " + commentMatch.Groups[1].Value);
					continue;
				}
			}

			outputLoc.Add("  }");
			outputLoc.Add("}");

			System.IO.File.WriteAllLines(PathToNonEnglishLocOutput, outputLoc.ToArray());
		}
	}

	// Localization cache
	static class Local
	{
		internal class ParamString
		{
			string paramString;
			internal ParamString(string paramString)
			{
				this.paramString = Localizer.Format(prefix + paramString);
			}

			/// <summary> 
			/// Replace &lt;&lt;x&gt;&gt; tags with the provided params. Doesn't support nested "#xxx" strings in the params, but faster.
			/// </summary>
			internal string Format(params string[] parameters)
			{
				parameterCache.Clear();
				foreach (string parameter in parameters)
					parameterCache.Add(parameter);

				return Grammar.useGrammar(paramString, parameterCache);
			}

			/// <summary> 
			/// Replace &lt;&lt;x&gt;&gt; tags with the provided params. Support nested "#xxx" strings in the params, but slower.
			/// </summary>
			string FormatNested(params string[] parameters)
			{
				List<string> parametersList = ReplaceTags(parameters);
				return Grammar.useGrammar(paramString, parametersList);
			}
		}

		static Local()
		{
			Localizer locInstance = Localizer.Instance;
			MethodInfo replaceTagsInfo = locInstance.GetType().GetMethod("ReplaceTags", BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
			ReplaceTags = (Func<string[], List<string>>)Delegate.CreateDelegate(typeof(Func<string[], List<string>>), locInstance, replaceTagsInfo);
		}

		static Func<string[], List<string>> ReplaceTags;
		static List<string> parameterCache = new List<string>();

		const string prefix = "#KERBALISM_";
		static string GetLoc(string template) => Localizer.Format(prefix + template);

		////////////////////////////////////////////////////////////////////
		// DON'T CHANGE THE FOLLOWING COMMENT (Used to find the beginning of the file) :
		// STARTOFLOCALIZATION
		////////////////////////////////////////////////////////////////////

		////////////////////////////////////////////////////////////////////
		// PartModules PAW UI Groups
		////////////////////////////////////////////////////////////////////
		static string Group_Science = GetLoc("Group_Science"); // "Science"
		static string Group_Greenhouse = GetLoc("Group_Greenhouse"); // "Greenhouse"
		static string Group_Habitat = GetLoc("Group_Habitat"); // "Habitat"
		static string Group_Radiation = GetLoc("Group_Radiation"); // "Radiation"
		static string Group_Configuration = GetLoc("Group_Configuration"); // "Configuration"
		static string Group_Processes = GetLoc("Group_Processes"); // "Processes"
		static string Group_Reliability = GetLoc("Group_Reliability"); // "Reliability"
		static string Group_Sensors = GetLoc("Group_Sensors"); // "Sensors"

		////////////////////////////////////////////////////////////////////
		// Generic strings
		////////////////////////////////////////////////////////////////////
		internal static string Generic_ON = GetLoc("Generic_ON"); // "on"
		internal static string Generic_OFF = GetLoc("Generic_OFF"); // "off"
		internal static string Generic_ENABLED = GetLoc("Generic_ENABLED"); // "enabled"
		internal static string Generic_DISABLED = GetLoc("Generic_DISABLED"); // "disabled"
		internal static string Generic_ACTIVE = GetLoc("Generic_ACTIVE"); // "active"
		internal static string Generic_INACTIVE = GetLoc("Generic_INACTIVE"); // "inactive"
		internal static string Generic_ALWAYSON = GetLoc("Generic_ALWAYSON"); // "always on"
		static string Generic_RECORDING = GetLoc("Generic_RECORDING"); // "recording"
		internal static string Generic_STOPPED = GetLoc("Generic_STOPPED"); // "stopped"
		internal static string Generic_RUNNING = GetLoc("Generic_RUNNING"); // "running"
		internal static string Generic_EXTENDED = GetLoc("Generic_EXTENDED"); // "extended"
		internal static string Generic_RETRACTED = GetLoc("Generic_RETRACTED"); // "retracted"
		internal static string Generic_DEPLOYED = GetLoc("Generic_DEPLOYED"); // "extended"
		internal static string Generic_BROKEN = GetLoc("Generic_BROKEN"); // "broken"
		internal static string Generic_EXTENDING = GetLoc("Generic_EXTENDING"); // "extending"
		internal static string Generic_RETRACTING = GetLoc("Generic_RETRACTING"); // "retracting"
		internal static string Generic_YES = GetLoc("Generic_YES"); // "yes"
		internal static string Generic_NO = GetLoc("Generic_NO"); // "no"
		internal static string Generic_RETRACT = GetLoc("Generic_RETRACT"); // "retract"
		internal static string Generic_DEPLOY = GetLoc("Generic_DEPLOY"); // "deploy"
		internal static string Generic_FROM = GetLoc("Generic_FROM"); // "from"
		internal static string Generic_TO = GetLoc("Generic_TO"); // "to"
		internal static string Generic_NONE = GetLoc("Generic_NONE"); // "none"
		internal static string Generic_NOTHING = GetLoc("Generic_NOTHING"); // "nothing"
		internal static string Generic_SLOTS = GetLoc("Generic_SLOTS"); // "slots"
		internal static string Generic_SLOT = GetLoc("Generic_SLOT"); // "slot"
		internal static string Generic_AVERAGE = GetLoc("Generic_AVERAGE"); // "average"
		internal static string Generic_notdeployed = GetLoc("Generic_notdeployed"); // "not deployed"
		internal static string Generic_PERPETUAL = GetLoc("Generic_PERPETUAL"); // "perpetual"
		internal static string Generic_NEVER = GetLoc("Generic_NEVER"); // "never"
		internal static string Generic_NOMINAL = GetLoc("Generic_NOMINAL"); // "nominal"
		internal static string Generic_perSecond = GetLoc("Generic_perSecond"); // "/s"
		internal static string Generic_perMinute = GetLoc("Generic_perMinute"); // "/m"
		internal static string Generic_perHour = GetLoc("Generic_perHour"); // "/h"
		internal static string Generic_perDay = GetLoc("Generic_perDay"); // "/d"
		internal static string Generic_perYear = GetLoc("Generic_perYear"); // "/y"
		internal static string Generic_START = GetLoc("Generic_START"); // "start"
		internal static string Generic_STOP = GetLoc("Generic_STOP"); // "stop"
		internal static string Generic_search = GetLoc("Generic_search"); // "search"
																		//$HIS_HER
		internal static string Kerbal_his = GetLoc("Kerbal_his"); // "his"
		internal static string Kerbal_her = GetLoc("Kerbal_her"); // "her"

		////////////////////////////////////////////////////////////////////
		// Hardcoded resource brokers (consumers/producers) localization
		// Shown in the resource telemetry tooltip
		////////////////////////////////////////////////////////////////////
		internal static string Brokers_Others = GetLoc("Brokers_Others"); // "others"
		internal static string Brokers_SolarPanel = GetLoc("Brokers_SolarPanel"); // "solar panel"
		internal static string Brokers_KSPIEGenerator = GetLoc("Brokers_KSPIEGenerator"); // "KSPIE generator"
		internal static string Brokers_FissionReactor = GetLoc("Brokers_FissionReactor"); // "fission generator"
		internal static string Brokers_RTG = GetLoc("Brokers_RTG"); // "radioisotope generator"
		internal static string Brokers_ScienceLab = GetLoc("Brokers_ScienceLab"); // "science lab"
		internal static string Brokers_Light = GetLoc("Brokers_Light"); // "light"
		internal static string Brokers_Boiloff = GetLoc("Brokers_Boiloff"); // "boiloff"
		internal static string Brokers_Cryotank = GetLoc("Brokers_Cryotank"); // "cryo tank"
		internal static string Brokers_Greenhouse = GetLoc("Brokers_Greenhouse"); // "greenhouse"
		internal static string Brokers_Deploy = GetLoc("Brokers_Deploy"); // "deploy"
		internal static string Brokers_Experiment = GetLoc("Brokers_Experiment"); // "experiment"
		internal static string Brokers_Command = GetLoc("Brokers_Command"); // "command"
		internal static string Brokers_GravityRing = GetLoc("Brokers_GravityRing"); // "gravity ring"
		internal static string Brokers_Scanner = GetLoc("Brokers_Scanner"); // "scanner"
		internal static string Brokers_Laboratory = GetLoc("Brokers_Laboratory"); // "laboratory"
		internal static string Brokers_CommsIdle = GetLoc("Brokers_CommsIdle"); // "comms (idle)"
		internal static string Brokers_CommsXmit = GetLoc("Brokers_CommsXmit"); // "comms (xmit)"
		internal static string Brokers_StockConverter = GetLoc("Brokers_StockConverter"); // "converter"
		internal static string Brokers_StockDrill = GetLoc("Brokers_StockDrill"); // "drill"
		internal static string Brokers_Harvester = GetLoc("Brokers_Harvester"); // "harvester"

		////////////////////////////////////////////////////////////////////
		//Contracts
		////////////////////////////////////////////////////////////////////
		internal static string Contracts_radTitle = GetLoc("Contracts_radTitle"); // "Cross the radiation belt"
		internal static string Contracts_radDesc = GetLoc("Contracts_radDesc"); // "A brilliant scientist predicted two belts of super-charged particles surrounding the planet. Now we need to confirm their existence and find out how deadly they really are."
		internal static string Contracts_radComplete = GetLoc("Contracts_radComplete"); // "The mission confirmed the presence of two radiation belts around the planet. Early data suggest extreme levels of radiation."
		internal static string Contracts_heliopauseTitle = GetLoc("Contracts_heliopauseTitle"); // "Cross the heliopause"
		internal static string Contracts_heliopauseDesc = GetLoc("Contracts_heliopauseDesc"); // "What is out there, beyond the heliopause? The truth is, we don't know. That's where you come in."
		internal static string Contracts_heliopauseComplete = GetLoc("Contracts_heliopauseComplete"); // "We went so far the mind doesn't comprehend it. Beyond the heliopause there are the wonders of interstellar space, and more radiation."
		internal static string Contracts_orbitTitle = GetLoc("Contracts_orbitTitle"); // "Put a Kerbal in orbit for 30 days"
		internal static string Contracts_orbitDesc = GetLoc("Contracts_orbitDesc"); // "Obtaining an orbit was easier than we expected. Now it is time to keep a Kerbal alive in orbit for 30 days."
		internal static string Contracts_orbitComplete = GetLoc("Contracts_orbitComplete"); // "The mission was a success, albeit the Kerbal is a bit bored. We have plenty of data about long-term permanence in space."
		internal static string Contracts_foodTitle = GetLoc("Contracts_foodTitle"); // "Harvest food in space"
		internal static string Contracts_foodDesc = GetLoc("Contracts_foodDesc"); // ""Now that we got the technology to grow food in space, we should probably test it. Harvest food from a greenhouse in space."
		internal static string Contracts_foodComplete = GetLoc("Contracts_foodComplete"); // "We harvested food in space, and our scientists says it is actually delicious."
		internal static string Contracts_sampleTitle = GetLoc("Contracts_sampleTitle"); // "Analyze samples in space"
		internal static string Contracts_sampleDesc = GetLoc("Contracts_sampleDesc"); // "The Laboratory can analyze samples in space, in theory. We should check if this actually work by and analyzing some samples in space."
		internal static string Contracts_sampleComplete = GetLoc("Contracts_sampleComplete"); // "Our Laboratory analysis was good, perhaps even better than the ones done usually by our scientists at mission control. But don't tell'em."

		////////////////////////////////////////////////////////////////////
		// Body info UI
		////////////////////////////////////////////////////////////////////
		internal static ParamString BodyInfo_BodyInfoToggleHelp = new ParamString("BodyInfo_BodyInfoToggleHelp"); // "Press <<1>> to open this window again"
		internal static ParamString BodyInfo_stormcycle = new ParamString("BodyInfo_stormcycle"); // "<<1>> cycle"
		internal static string BodyInfo_title = GetLoc("BodyInfo_title"); // "BODY INFO"
		internal static string BodyInfo_SURFACE = GetLoc("BodyInfo_SURFACE"); // "SURFACE"
		internal static string BodyInfo_temperature = GetLoc("BodyInfo_temperature"); // "temperature"
		internal static string BodyInfo_solarflux = GetLoc("BodyInfo_solarflux"); // "solar flux"
		internal static string BodyInfo_radiation = GetLoc("BodyInfo_radiation"); // "radiation"
		internal static string BodyInfo_ATMOSPHERE = GetLoc("BodyInfo_ATMOSPHERE"); // "ATMOSPHERE"
		internal static string BodyInfo_breathable = GetLoc("BodyInfo_breathable"); // "breathable"
		internal static string BodyInfo_breathable_yes = GetLoc("BodyInfo_breathable_yes"); // "yes"
		internal static string BodyInfo_breathable_no = GetLoc("BodyInfo_breathable_no"); // "no"
		internal static string BodyInfo_lightabsorption = GetLoc("BodyInfo_lightabsorption"); // "light absorption"
		internal static string BodyInfo_gammaabsorption = GetLoc("BodyInfo_gammaabsorption"); // "gamma absorption"
		internal static string BodyInfo_RADIATION = GetLoc("BodyInfo_RADIATION"); // "RADIATION"
		internal static string BodyInfo_solaractivity = GetLoc("BodyInfo_solaractivity"); // "solar activity"
		internal static string BodyInfo_radiationonsurface = GetLoc("BodyInfo_radiationonsurface"); // "radiation on surface:"
		internal static string BodyInfo_innerbelt = GetLoc("BodyInfo_innerbelt"); // "inner belt: "
		internal static string BodyInfo_outerbelt = GetLoc("BodyInfo_outerbelt"); // "outer belt: "
		internal static string BodyInfo_magnetopause = GetLoc("BodyInfo_magnetopause"); // "magnetopause:"
		internal static string BodyInfo_show = GetLoc("BodyInfo_show"); // "show"
		internal static string BodyInfo_hide = GetLoc("BodyInfo_hide"); // "hide"
		internal static string BodyInfo_unknown = GetLoc("BodyInfo_unknown"); // "unknown"

		////////////////////////////////////////////////////////////////////
		// Monitor UI
		////////////////////////////////////////////////////////////////////
		internal static ParamString Monitor_GoComfirm = new ParamString("Monitor_GoComfirm"); // "Do you really want go to <<1>> vessel?"
		internal static string Monitor_novessels = GetLoc("Monitor_novessels"); // "no vessels"
		internal static string Monitor_Gotovessel = GetLoc("Monitor_Gotovessel"); // "Go to vessel!"
		internal static string Monitor_Warning_title = GetLoc("Monitor_Warning_title"); // "Warning!"
		internal static string Monitor_GoComfirm_button1 = GetLoc("Monitor_GoComfirm_button1"); // "Go"
		internal static string Monitor_GoComfirm_button2 = GetLoc("Monitor_GoComfirm_button2"); // "Target"
		internal static string Monitor_GoComfirm_button3 = GetLoc("Monitor_GoComfirm_button3"); // "Stay"
		internal static string Monitor_tooltip = GetLoc("Monitor_tooltip"); // "\n<i>(middle-click to popout in a window, middle-click again to close popout)</i>"
		internal static string Monitor_INFO = GetLoc("Monitor_INFO"); // "INFO"
		internal static string Monitor_INFO_desc = GetLoc("Monitor_INFO_desc"); // "Telemetry readings"
		internal static string Monitor_DATA = GetLoc("Monitor_DATA"); // "DATA"
		internal static string Monitor_DATA_desc = GetLoc("Monitor_DATA_desc"); // "Stored files and samples"
		internal static string Monitor_AUTO = GetLoc("Monitor_AUTO"); // "AUTO"
		internal static string Monitor_AUTO_desc = GetLoc("Monitor_AUTO_desc"); // "Control and automate components"
		internal static string Monitor_FAILURES = GetLoc("Monitor_FAILURES"); // "FAILURES"
		internal static string Monitor_FAILURES_desc = GetLoc("Monitor_FAILURES_desc"); // "See failures and maintenance state"
		internal static string Monitor_LOG = GetLoc("Monitor_LOG"); // "LOG"
		internal static string Monitor_LOG_desc = GetLoc("Monitor_LOG_desc"); // "See previous notifications"
		internal static string Monitor_CFG = GetLoc("Monitor_CFG"); // "CFG"
		internal static string Monitor_CFG_desc = GetLoc("Monitor_CFG_desc"); // "Configure the vessel"
		internal static string Monitor_Inshadow = GetLoc("Monitor_Inshadow"); // "In shadow"
		internal static string Monitor_Greenhouse = GetLoc("Monitor_Greenhouse"); // "Greenhouse:"
		internal static string Monitor_ExposedRadiation1 = GetLoc("Monitor_ExposedRadiation1"); // "Exposed to extreme radiation"
		internal static string Monitor_ExposedRadiation2 = GetLoc("Monitor_ExposedRadiation2"); // "Exposed to intense radiation"
		internal static string Monitor_ExposedRadiation3 = GetLoc("Monitor_ExposedRadiation3"); // "Exposed to moderate radiation"
		internal static string Monitor_CO2level = GetLoc("Monitor_CO2level"); // "CO2 level in internal atmosphere:"
		internal static string Monitor_ejectionincoming = GetLoc("Monitor_ejectionincoming"); // "Coronal mass ejection incoming"
		internal static string Monitor_TimetoimpactCoronalmass = GetLoc("Monitor_TimetoimpactCoronalmass"); // "Time to impact:"
		internal static string Monitor_Solarstorminprogress = GetLoc("Monitor_Solarstorminprogress"); // "Solar storm in progress"
		internal static string Monitor_SolarstormRemaining = GetLoc("Monitor_SolarstormRemaining"); // "Remaining duration:"
		internal static string Monitor_name = GetLoc("Monitor_name"); // "name"
		internal static string Monitor_level = GetLoc("Monitor_level"); // "level"
		internal static string Monitor_duration = GetLoc("Monitor_duration"); // "duration"
		internal static string Monitor_depleted = GetLoc("Monitor_depleted"); // "depleted"
		internal static string Monitor_Malfunctions = GetLoc("Monitor_Malfunctions"); // "Malfunctions"
		internal static string Monitor_Criticalfailures = GetLoc("Monitor_Criticalfailures"); // "Critical failures"
		internal static string Monitor_Hidden_Vessels = GetLoc("Monitor_Hidden_Vessels"); // "Hidden vessels"

		////////////////////////////////////////////////////////////////////
		// Telemetry/Planner UI : Signal
		////////////////////////////////////////////////////////////////////
		internal static string UI_signallost = GetLoc("UI_signallost"); // "Signal lost with"
		internal static string UI_signalback = GetLoc("UI_signalback"); // "signal is back"
		internal static string UI_relayby = GetLoc("UI_relayby"); // "Relayed by"
		internal static string UI_directlink = GetLoc("UI_directlink"); // "We got a direct link with the space center"
		internal static string UI_noctrl = GetLoc("UI_noctrl"); // "Remote control disabled"
		internal static string UI_limitedcontrol = GetLoc("UI_limitedcontrol"); // "Limited control available"
		internal static string UI_telemetry = GetLoc("UI_telemetry"); // "telemetry"
		internal static string UI_DSNconnected = GetLoc("UI_DSNconnected"); // "DSN connected"
		internal static string UI_sciencerate = GetLoc("UI_sciencerate"); // "science rate"
		internal static string UI_strength = GetLoc("UI_strength"); // "strength"
		internal static string UI_target = GetLoc("UI_target"); // "target"
		internal static string UI_transmitting = GetLoc("UI_transmitting"); // "transmitting"
		internal static string UI_Signalrelayed = GetLoc("UI_Signalrelayed"); // "Signal relayed"
		internal static string UI_Plasmablackout = GetLoc("UI_Plasmablackout"); // "Plasma blackout"
		internal static string UI_Stormblackout = GetLoc("UI_Stormblackout"); // "Storm blackout"
		internal static string UI_transmissiondisabled = GetLoc("UI_transmissiondisabled"); // "Data transmission disabled"

		////////////////////////////////////////////////////////////////////
		// Telemetry/Planner UI : Automation
		////////////////////////////////////////////////////////////////////
		internal static string UI_devman = GetLoc("UI_devman"); // "DEV MANAGER"
		internal static string UI_devices = GetLoc("UI_devices"); // "DEVICES"
		internal static string UI_dontcare = GetLoc("UI_dontcare"); // "don't care"
		internal static string UI_scriptvessel = GetLoc("UI_scriptvessel"); // "Script called on vessel"
		internal static string DevManager_VESSELDEVICES = GetLoc("DevManager_VESSELDEVICES"); // "VESSEL DEVICES"
		internal static string DevManager_MODULEDEVICES = GetLoc("DevManager_MODULEDEVICES"); // "MODULE DEVICES"
		internal static string DevManager_nodevices = GetLoc("DevManager_nodevices"); // "no devices"

		internal static string DevManager_TabManual = GetLoc("DevManager_TabManual"); // "<i>Control vessel components directly</i>"
		internal static string DevManager_TabLanded = GetLoc("DevManager_TabLanded"); // "<i>Called on landing</i>"
		internal static string DevManager_TabAtmo = GetLoc("DevManager_TabAtmo"); // "<i>Called on entering atmosphere</i>"
		internal static string DevManager_TabSpace = GetLoc("DevManager_TabSpace"); // "<i>Called on reaching space</i>"
		internal static string DevManager_TabSunlight = GetLoc("DevManager_TabSunlight"); // "<i>Called when sun became visible</i>"
		internal static string DevManager_TabShadow = GetLoc("DevManager_TabShadow"); // "<i>Called when sun became occluded</i>"
		internal static string DevManager_TabPowerHigh = GetLoc("DevManager_TabPowerHigh"); // "<i>Called when EC level goes above 80%</i>"
		internal static string DevManager_TabPowerLow = GetLoc("DevManager_TabPowerLow"); // "<i>Called when EC level goes below 20%</i>"
		internal static string DevManager_TabRadHigh = GetLoc("DevManager_TabRadHigh"); // "<i>Called when radiation exceed 0.05 rad/h</i>"
		internal static string DevManager_TabRadLow = GetLoc("DevManager_TabRadLow"); // "<i>Called when radiation goes below 0.02 rad/h</i>"
		internal static string DevManager_TabLinked = GetLoc("DevManager_TabLinked"); // "<i>Called when signal is regained</i>"
		internal static string DevManager_TabUnlinked = GetLoc("DevManager_TabUnlinked"); // "<i>Called when signal is lost</i>"
		internal static string DevManager_TabEVAOut = GetLoc("DevManager_TabEVAOut"); // "<i>Called when going out on EVA</i>"
		internal static string DevManager_TabEVAIn = GetLoc("DevManager_TabEVAIn"); // "<i>Called when returning from EVA</i>"
		internal static string DevManager_TabAct1 = GetLoc("DevManager_TabAct1"); // "<i>Called by pressing <b>1</b> on the keyboard</i>"
		internal static string DevManager_TabAct2 = GetLoc("DevManager_TabAct2"); // "<i>Called by pressing <b>2</b> on the keyboard</i>"
		internal static string DevManager_TabAct3 = GetLoc("DevManager_TabAct3"); // "<i>Called by pressing <b>3</b> on the keyboard</i>"
		internal static string DevManager_TabAct4 = GetLoc("DevManager_TabAct4"); // "<i>Called by pressing <b>4</b> on the keyboard</i>"
		internal static string DevManager_TabAct5 = GetLoc("DevManager_TabAct5"); // "<i>Called by pressing <b>5</b> on the keyboard</i>"
		internal static string DevManager_TabDriveFull = GetLoc("DevManager_TabDriveFull"); // "<i>Called when data free space is below 10%</i>"
		internal static string DevManager_TabDriveEmpty = GetLoc("DevManager_TabDriveEmpty"); // "<i>Called when data free space is above 85%</i>"

		internal static string DevManager_NameTabLanded = GetLoc("DevManager_NameTabLanded"); // "landed"
		internal static string DevManager_NameTabAtmo = GetLoc("DevManager_NameTabAtmo"); // "atmo"
		internal static string DevManager_NameTabSpace = GetLoc("DevManager_NameTabSpace"); // "space"
		internal static string DevManager_NameTabSunlight = GetLoc("DevManager_NameTabSunlight"); // "sunlight"
		internal static string DevManager_NameTabShadow = GetLoc("DevManager_NameTabShadow"); // "shadow"
		internal static string DevManager_NameTabPowerHigh = GetLoc("DevManager_NameTabPowerHigh"); // "power high"
		internal static string DevManager_NameTabPowerLow = GetLoc("DevManager_NameTabPowerLow"); // "power low"
		internal static string DevManager_NameTabRadHigh = GetLoc("DevManager_NameTabRadHigh"); // "rad high"
		internal static string DevManager_NameTabRadLow = GetLoc("DevManager_NameTabRadLow"); // "rad low"
		internal static string DevManager_NameTabLinked = GetLoc("DevManager_NameTabLinked"); // "linked"
		internal static string DevManager_NameTabUnlinked = GetLoc("DevManager_NameTabUnlinked"); // "unlinked"
		internal static string DevManager_NameTabEVAOut = GetLoc("DevManager_NameTabEVAOut"); // "EVA out"
		internal static string DevManager_NameTabEVAIn = GetLoc("DevManager_NameTabEVAIn"); // "EVA in"
		internal static string DevManager_NameTabAct1 = GetLoc("DevManager_NameTabAct1"); // "action 1"
		internal static string DevManager_NameTabAct2 = GetLoc("DevManager_NameTabAct2"); // "action 2"
		internal static string DevManager_NameTabAct3 = GetLoc("DevManager_NameTabAct3"); // "action 3"
		internal static string DevManager_NameTabAct4 = GetLoc("DevManager_NameTabAct4"); // "action 4"
		internal static string DevManager_NameTabAct5 = GetLoc("DevManager_NameTabAct5"); // "action 5"
		internal static string DevManager_NameTabDriveFull = GetLoc("DevManager_NameTabDriveFull"); // "drive full"
		internal static string DevManager_NameTabDriveEmpty = GetLoc("DevManager_NameTabDriveEmpty"); // "drive empty"

		////////////////////////////////////////////////////////////////////
		// Telemetry/Planner UI : Comfort
		////////////////////////////////////////////////////////////////////
		internal static string Comfort_firmground = GetLoc("Comfort_firmground"); // "firm ground"
		internal static string Comfort_exercise = GetLoc("Comfort_exercise"); // "exercise"
		internal static string Comfort_notalone = GetLoc("Comfort_notalone"); // "not alone"
		internal static string Comfort_callhome = GetLoc("Comfort_callhome"); // "call home"
		internal static string Comfort_panorama = GetLoc("Comfort_panorama"); // "panorama"
		internal static string Comfort_factor = GetLoc("Comfort_factor"); // "factor"
		internal static string Comfort_plants = GetLoc("Comfort_plants"); // "plants"
		internal static string Configure_noconfigure = GetLoc("Configure_noconfigure"); // "Can't reconfigure the component"
		internal static string Configure_dumpexcess = GetLoc("Configure_dumpexcess"); // "Reconfiguring will dump resources in excess of capacity."
		internal static string Science_ofdatatransfer = GetLoc("Science_ofdatatransfer"); // "of data transfered"
		internal static string Science_inoperable = GetLoc("Science_inoperable"); // "The experiment is now inoperable, resetting will require a <b>Scientist</b>"

		////////////////////////////////////////////////////////////////////
		// Telemetry/Planner UI : CONNECTION MANAGER
		////////////////////////////////////////////////////////////////////
		internal static string ConnManager_title = GetLoc("ConnManager_title"); // "CONNECTION MANAGER"
		internal static string ConnManager_CONTROLPATH = GetLoc("ConnManager_CONTROLPATH"); // "CONTROL PATH"
		internal static string ConnManager_noconnection = GetLoc("ConnManager_noconnection"); // "no connection"

		////////////////////////////////////////////////////////////////////
		// Telemetry/Planner UI : reliability / quality
		////////////////////////////////////////////////////////////////////
		internal static string QualityManagement_title = GetLoc("QualityManagement_title"); // "Quality Management"
		internal static string QualityManagement_noqualityinfo = GetLoc("QualityManagement_noqualityinfo"); // "no quality info"
		internal static string QualityManagement_Misc = GetLoc("QualityManagement_Misc"); // "Misc"
		internal static string QualityManagement_busted = GetLoc("QualityManagement_busted"); // "busted"
		internal static string QualityManagement_needsrepair = GetLoc("QualityManagement_needsrepair"); // "needs repair"
		internal static string QualityManagement_needsservice = GetLoc("QualityManagement_needsservice"); // "needs service"
		internal static string QualityManagement_operationduration = GetLoc("QualityManagement_operationduration"); // "operation duration"
		internal static string QualityManagement_ignitionlimit = GetLoc("QualityManagement_ignitionlimit"); // "ignition limit"
		internal static string QualityManagement_good = GetLoc("QualityManagement_good"); // "good"

		////////////////////////////////////////////////////////////////////
		// Monitor UI : file manager
		////////////////////////////////////////////////////////////////////
		internal static ParamString FILEMANAGER_DataAvailable = new ParamString("FILEMANAGER_DataAvailable"); // "(<<1>> available)"
		internal static ParamString FILEMANAGER_SAMPLESMass = new ParamString("FILEMANAGER_SAMPLESMass"); // "SAMPLES <<1>>"
		internal static ParamString FILEMANAGER_TransmittingRate = new ParamString("FILEMANAGER_TransmittingRate"); // "Transmitting at <<1>>"
		internal static ParamString FILEMANAGER_DeleteConfirm = new ParamString("FILEMANAGER_DeleteConfirm"); // "Do you really want to delete <<1>>?"
		internal static ParamString FILEMANAGER_DumpConfirm = new ParamString("FILEMANAGER_DumpConfirm"); // "Do you really want to dump <<1>>?"
		internal static string FILEMANAGER_title = GetLoc("FILEMANAGER_title"); // "FILE MANAGER"
		internal static string FILEMANAGER_DataCapacity = GetLoc("FILEMANAGER_DataCapacity"); // "DATA"
		internal static string FILEMANAGER_nofiles = GetLoc("FILEMANAGER_nofiles"); // "no files"
		internal static string FILEMANAGER_SAMPLESAvailable = GetLoc("FILEMANAGER_SAMPLESAvailable"); // "available"
		internal static string FILEMANAGER_nosamples = GetLoc("FILEMANAGER_nosamples"); // "no samples"
		internal static string FILEMANAGER_Transmitduration = GetLoc("FILEMANAGER_Transmitduration"); // "Transmit duration :"
		internal static string FILEMANAGER_send = GetLoc("FILEMANAGER_send"); // "Flag the file for transmission to <b>DSN</b>"
		internal static string FILEMANAGER_Delete = GetLoc("FILEMANAGER_Delete"); // "Delete the file"
		internal static string FILEMANAGER_Warning_title = GetLoc("FILEMANAGER_Warning_title"); // "Warning!"
		internal static string FILEMANAGER_DeleteConfirm_button1 = GetLoc("FILEMANAGER_DeleteConfirm_button1"); // "Delete it"
		internal static string FILEMANAGER_DeleteConfirm_button2 = GetLoc("FILEMANAGER_DeleteConfirm_button2"); // "Keep it"
		internal static string FILEMANAGER_analysis = GetLoc("FILEMANAGER_analysis"); // "Flag the file for analysis in a <b>laboratory</b>"
		internal static string FILEMANAGER_Dumpsample = GetLoc("FILEMANAGER_Dumpsample"); // "Dump the sample"																
		internal static string FILEMANAGER_DumpConfirm_button1 = GetLoc("FILEMANAGER_DumpConfirm_button1"); // "Dump it"
		internal static string FILEMANAGER_DumpConfirm_button2 = GetLoc("FILEMANAGER_DumpConfirm_button2"); // "Keep it"

		////////////////////////////////////////////////////////////////////
		// Messages
		////////////////////////////////////////////////////////////////////
		internal static string Message_RELAX = GetLoc("Message_RELAX"); // "RELAX"
		internal static string Message_WARNING = GetLoc("Message_WARNING"); // "WARNING"
		internal static string Message_DANGER = GetLoc("Message_DANGER"); // "DANGER"
		internal static string Message_FATALITY = GetLoc("Message_FATALITY"); // "FATALITY"
		internal static string Message_BREAKDOWN = GetLoc("Message_BREAKDOWN"); // "BREAKDOWN"

		////////////////////////////////////////////////////////////////////
		// Monitor : main telemetry panel UI
		////////////////////////////////////////////////////////////////////
		internal static string TELEMETRY_title = GetLoc("TELEMETRY_title"); // "TELEMETRY"
		internal static string TELEMETRY_EVASUIT = GetLoc("TELEMETRY_EVASUIT"); // "EVA SUIT"
		internal static string TELEMETRY_ENVIRONMENT = GetLoc("TELEMETRY_ENVIRONMENT"); // "ENVIRONMENT"
		internal static string TELEMETRY_SolarPanelsAverageExposure = GetLoc("TELEMETRY_SolarPanelsAverageExposure"); // "solar panels average exposure"
		internal static string TELEMETRY_Exposureignoringbodiesocclusion = GetLoc("TELEMETRY_Exposureignoringbodiesocclusion"); // "Exposure ignoring bodies occlusion"
		internal static string TELEMETRY_Exposureignoringbodiesocclusion_desc = GetLoc("TELEMETRY_Exposureignoringbodiesocclusion_desc"); // "Won't change on unloaded vessels\nMake sure to optimize it before switching"
		internal static string TELEMETRY_nosensorsinstalled = GetLoc("TELEMETRY_nosensorsinstalled"); // "no sensors installed"
		internal static string TELEMETRY_HABITAT = GetLoc("TELEMETRY_HABITAT"); // "HABITAT"
		internal static string TELEMETRY_co2level = GetLoc("TELEMETRY_co2level"); // "co2 level"
		internal static string TELEMETRY_radiation = GetLoc("TELEMETRY_radiation"); // "radiation"
		internal static string TELEMETRY_pressure = GetLoc("TELEMETRY_pressure"); // "pressure"
		internal static string TELEMETRY_shielding = GetLoc("TELEMETRY_shielding"); // "shielding"
		internal static string TELEMETRY_livingspace = GetLoc("TELEMETRY_livingspace"); // "living space"
		internal static string TELEMETRY_comfort = GetLoc("TELEMETRY_comfort"); // "comfort"
		internal static string TELEMETRY_EVAsavailable = GetLoc("TELEMETRY_EVAsavailable"); // "EVA's available"
		internal static string TELEMETRY_EnvBreathable = GetLoc("TELEMETRY_EnvBreathable"); // "infinite"
		internal static string TELEMETRY_Breathableatm = GetLoc("TELEMETRY_Breathableatm"); // "breathable atmosphere"
		internal static string TELEMETRY_approx = GetLoc("TELEMETRY_approx"); // "approx (derived from stored N2)"
		internal static string TELEMETRY_TRANSMISSION = GetLoc("TELEMETRY_TRANSMISSION"); // "TRANSMISSION"
		internal static string TELEMETRY_TRANSMISSION_rate = GetLoc("TELEMETRY_TRANSMISSION_rate"); // "rate"
		internal static string TELEMETRY_filetransmitted = GetLoc("TELEMETRY_filetransmitted"); // "file transmitted"
		internal static string TELEMETRY_transmitting = GetLoc("TELEMETRY_transmitting"); // "transmitting"
		internal static string TELEMETRY_maxtransmissionrate = GetLoc("TELEMETRY_maxtransmissionrate"); // "max transmission rate"
		internal static string TELEMETRY_target = GetLoc("TELEMETRY_target"); // "target"
		internal static string TELEMETRY_totalsciencetransmitted = GetLoc("TELEMETRY_totalsciencetransmitted"); // "total science transmitted"
		internal static string TELEMETRY_SUPPLIES = GetLoc("TELEMETRY_SUPPLIES"); // "SUPPLIES"
		internal static string TELEMETRY_nochange = GetLoc("TELEMETRY_nochange"); // "no change"
		internal static string TELEMETRY_empty = GetLoc("TELEMETRY_empty"); // "(empty)"
		internal static string TELEMETRY_full = GetLoc("TELEMETRY_full"); // "(full)"
		internal static string TELEMETRY_VITALS = GetLoc("TELEMETRY_VITALS"); // "VITALS"
		internal static string TELEMETRY_HYBERNATED = GetLoc("TELEMETRY_HYBERNATED"); // "HYBERNATED"
		internal static string TELEMETRY_GREENHOUSE = GetLoc("TELEMETRY_GREENHOUSE"); // "GREENHOUSE"
		internal static string TELEMETRY_readytoharvest = GetLoc("TELEMETRY_readytoharvest"); // "ready to harvest"
		internal static string TELEMETRY_growing = GetLoc("TELEMETRY_growing"); // "growing"
		internal static string TELEMETRY_timetoharvest = GetLoc("TELEMETRY_timetoharvest"); // "time to harvest"
		internal static string TELEMETRY_growth = GetLoc("TELEMETRY_growth"); // "growth"
		internal static string TELEMETRY_naturallighting = GetLoc("TELEMETRY_naturallighting"); // "natural lighting"
		internal static string TELEMETRY_artificiallighting = GetLoc("TELEMETRY_artificiallighting"); // "artificial lighting"
		internal static string TELEMETRY_crop = GetLoc("TELEMETRY_crop"); // "crop"
		internal static string TimeoutMsg1 = GetLoc("TimeoutMsg1"); // "Connection in progress"
		internal static string TimeoutMsg2 = GetLoc("TimeoutMsg2"); // "Connection timed-out"
		internal static ParamString TimeoutMsg3 = new ParamString("TimeoutMsg3"); // "New tentative in <<1>> (s)"

		////////////////////////////////////////////////////////////////////
		// Monitor : vessel config UI
		////////////////////////////////////////////////////////////////////
		internal static string VESSELCONFIG_title = GetLoc("VESSELCONFIG_title"); // "VESSEL CONFIG"
		internal static string VESSELCONFIG_RENDERING = GetLoc("VESSELCONFIG_RENDERING"); // "RENDERING"
		internal static string VESSELCONFIG_Highlightfailed = GetLoc("VESSELCONFIG_Highlightfailed"); // "highlight malfunctions"
		internal static string VESSELCONFIG_Highlightfailed_desc = GetLoc("VESSELCONFIG_Highlightfailed_desc"); // "Highlight failed components"
		internal static string VESSELCONFIG_MESSAGES = GetLoc("VESSELCONFIG_MESSAGES"); // "MESSAGES"
		internal static string VESSELCONFIG_EClow = GetLoc("VESSELCONFIG_EClow"); // "Receive a message when\nElectricCharge level is low"
		internal static string VESSELCONFIG_battery = GetLoc("VESSELCONFIG_battery"); // "battery"
		internal static string VESSELCONFIG_Supplylow = GetLoc("VESSELCONFIG_Supplylow"); // "Receive a message when\nsupply resources level is low"
		internal static string VESSELCONFIG_supply = GetLoc("VESSELCONFIG_supply"); // "supply"
		internal static string VESSELCONFIG_Signallost = GetLoc("VESSELCONFIG_Signallost"); // "Receive a message when signal is lost or obtained"
		internal static string VESSELCONFIG_signal = GetLoc("VESSELCONFIG_signal"); // "signal"
		internal static string VESSELCONFIG_Componentfail = GetLoc("VESSELCONFIG_Componentfail"); // "Receive a message\nwhen a component fail"
		internal static string VESSELCONFIG_reliability = GetLoc("VESSELCONFIG_reliability"); // "reliability"
		internal static string VESSELCONFIG_CMEevent = GetLoc("VESSELCONFIG_CMEevent"); // "Receive a message\nduring CME events"
		internal static string VESSELCONFIG_storm = GetLoc("VESSELCONFIG_storm"); // "storm"
		internal static string VESSELCONFIG_ScriptExe = GetLoc("VESSELCONFIG_ScriptExe"); // "Receive a message when\nscripts are executed"
		internal static string VESSELCONFIG_script = GetLoc("VESSELCONFIG_script"); // "Script"
		internal static string VESSELCONFIG_ShowVessel = GetLoc("VESSELCONFIG_ShowVessel"); // "Show in vessels list"
		internal static string VESSELCONFIG_ShowVessel_desc = GetLoc("VESSELCONFIG_ShowVessel_desc"); // "Show this vessel in the vessels list"

		////////////////////////////////////////////////////////////////////
		// Science Archive Window
		////////////////////////////////////////////////////////////////////
		internal static string SCIENCEARCHIVE_title = GetLoc("SCIENCEARCHIVE_title"); // "SCIENCE ARCHIVE"
		internal static string SCIENCEARCHIVE_hidearchive = GetLoc("SCIENCEARCHIVE_hidearchive"); // "hide science archive"
		internal static string SCIENCEARCHIVE_EXPERIMENTS = GetLoc("SCIENCEARCHIVE_EXPERIMENTS"); // "EXPERIMENTS"
		internal static string SCIENCEARCHIVE_filter1 = GetLoc("SCIENCEARCHIVE_filter1"); // "filter by researched"
		internal static string SCIENCEARCHIVE_filter2 = GetLoc("SCIENCEARCHIVE_filter2"); // "filter ROCs"
		internal static string SCIENCEARCHIVE_filter3 = GetLoc("SCIENCEARCHIVE_filter3"); // "filter by current vessel"
		internal static string SCIENCEARCHIVE_EXPERIMENTINFO = GetLoc("SCIENCEARCHIVE_EXPERIMENTINFO"); // "EXPERIMENT INFO"
		internal static string SCIENCEARCHIVE_STATUS = GetLoc("SCIENCEARCHIVE_STATUS"); // "STATUS"
		internal static string SCIENCEARCHIVE_onvessel = GetLoc("SCIENCEARCHIVE_onvessel"); // "on vessel :"
		internal static string SCIENCEARCHIVE_onpart = GetLoc("SCIENCEARCHIVE_onpart"); // "on part :"
		internal static string SCIENCEARCHIVE_showarchive = GetLoc("SCIENCEARCHIVE_showarchive"); // "show science archive"
		internal static string SCIENCEARCHIVE_showexperimentinfo = GetLoc("SCIENCEARCHIVE_showexperimentinfo"); // "show experiment info"
		internal static string SCIENCEARCHIVE_hideexperimentinfo = GetLoc("SCIENCEARCHIVE_hideexperimentinfo"); // "hide experiment info"
		internal static string SCIENCEARCHIVE_closebutton = GetLoc("SCIENCEARCHIVE_closebutton"); // "close"
		internal static string SCIENCEARCHIVE_forcedrun = GetLoc("SCIENCEARCHIVE_forcedrun"); // "forced run"
		internal static string SCIENCEARCHIVE_forcedrun_desc = GetLoc("SCIENCEARCHIVE_forcedrun_desc"); // "force experiment to run even\nif there is no science value left"
		internal static string SCIENCEARCHIVE_REQUIREMENTS = GetLoc("SCIENCEARCHIVE_REQUIREMENTS"); // "REQUIREMENTS"
		internal static string SCIENCEARCHIVE_state = GetLoc("SCIENCEARCHIVE_state"); // "state"
		internal static string SCIENCEARCHIVE_status = GetLoc("SCIENCEARCHIVE_status"); // "status"
		internal static string SCIENCEARCHIVE_collected = GetLoc("SCIENCEARCHIVE_collected"); // "collected"
		internal static string SCIENCEARCHIVE_samples = GetLoc("SCIENCEARCHIVE_samples"); // "samples"
		internal static string SCIENCEARCHIVE_situation = GetLoc("SCIENCEARCHIVE_situation"); // "situation"
		internal static string SCIENCEARCHIVE_retrieved = GetLoc("SCIENCEARCHIVE_retrieved"); // "retrieved"
		internal static string SCIENCEARCHIVE_invalidsituation = GetLoc("SCIENCEARCHIVE_invalidsituation"); // "invalid situation"
		internal static string SCIENCEARCHIVE_value = GetLoc("SCIENCEARCHIVE_value"); // "value"
		internal static string SCIENCEARCHIVE_never = GetLoc("SCIENCEARCHIVE_never"); // "never"
		internal static string SCIENCEARCHIVE_inRnD = GetLoc("SCIENCEARCHIVE_inRnD"); // "in RnD"
		internal static string SCIENCEARCHIVE_inflight = GetLoc("SCIENCEARCHIVE_inflight"); // "in flight)"
		internal static string SCIENCEARCHIVE_stop = GetLoc("SCIENCEARCHIVE_stop"); // "stop"
		internal static string SCIENCEARCHIVE_start = GetLoc("SCIENCEARCHIVE_start"); // "start"
		internal static string SCIENCEARCHIVE_current = GetLoc("SCIENCEARCHIVE_current"); // "current"
		internal static string SCIENCEARCHIVE_Showonlyknownsubjects = GetLoc("SCIENCEARCHIVE_Showonlyknownsubjects"); // "Show only known subjects"
		internal static string SCIENCEARCHIVE_RnD = GetLoc("SCIENCEARCHIVE_RnD"); // "RnD"
		internal static string SCIENCEARCHIVE_RnD_desc = GetLoc("SCIENCEARCHIVE_RnD_desc"); // "Science points\nretrieved in RnD"
		internal static string SCIENCEARCHIVE_Flight = GetLoc("SCIENCEARCHIVE_Flight"); // "Flight"
		internal static string SCIENCEARCHIVE_Flight_desc = GetLoc("SCIENCEARCHIVE_Flight_desc"); // "Science points\ncollected in all vessels"
		internal static string SCIENCEARCHIVE_Value = GetLoc("SCIENCEARCHIVE_Value"); // "Value"
		internal static string SCIENCEARCHIVE_Value_desc = GetLoc("SCIENCEARCHIVE_Value_desc"); // "Remaining science value\naccounting for data retrieved in RnD\nand collected in flight"
		internal static string SCIENCEARCHIVE_Completed = GetLoc("SCIENCEARCHIVE_Completed"); // "Completed"
		internal static string SCIENCEARCHIVE_Completed_desc = GetLoc("SCIENCEARCHIVE_Completed_desc"); // "How many times the subject\nhas been retrieved in RnD"
		internal static string SCIENCEARCHIVE_info_Crew = GetLoc("SCIENCEARCHIVE_info_Crew");// "Crew"
		internal static string SCIENCEARCHIVE_info_levelReq = GetLoc("SCIENCEARCHIVE_info_levelReq");// "of level"
		internal static string SCIENCEARCHIVE_info_Req = GetLoc("SCIENCEARCHIVE_info_Req");// "is required"
		internal static string SCIENCEARCHIVE_info_no = GetLoc("SCIENCEARCHIVE_info_no");// "no"
		internal static string SCIENCEARCHIVE_info_anyone = GetLoc("SCIENCEARCHIVE_info_anyone");// "anyone"
		internal static string SCIENCEARCHIVE_info_level = GetLoc("SCIENCEARCHIVE_info_level"); // "level:"
		internal static string SCIENCEARCHIVE_CREDITS = GetLoc("SCIENCEARCHIVE_CREDITS");// "CREDITS"

		////////////////////////////////////////////////////////////////////
		// Module : Emitter
		////////////////////////////////////////////////////////////////////
		static string Emitter_Action = GetLoc("Emitter_Action"); // "Toggle Active Shield"
		internal static string Emitter_EmitIonizing = GetLoc("Emitter_EmitIonizing"); // "Emit ionizing radiation"
		internal static string Emitter_ReduceIncoming = GetLoc("Emitter_ReduceIncoming"); // "Reduce incoming radiation"
		internal static string Emitter_Emitted = GetLoc("Emitter_Emitted"); // "Radiation emitted"
		internal static string Emitter_ActiveShielding = GetLoc("Emitter_ActiveShielding"); // "Active shielding"
		internal static string Emitter_none = GetLoc("Emitter_none"); // "none"

		////////////////////////////////////////////////////////////////////
		// Module : Deploy
		////////////////////////////////////////////////////////////////////
		internal static string Deploy_actualCost = GetLoc("Deploy_actualCost"); // "EC Usage"
		static string Deploy_isBroken = GetLoc("Deploy_isBroken"); // "Is broken"

		////////////////////////////////////////////////////////////////////
		// Module : Configure
		////////////////////////////////////////////////////////////////////
		internal static string Module_Configure = GetLoc("Module_Configure"); // "Configure"
		internal static string Module_Configure_Slots = GetLoc("Module_Configure_Slots"); // "Slots"
		internal static string Module_Configure_Reconfigure = GetLoc("Module_Configure_Reconfigure"); // "Reconfigure"
		internal static string Module_Configure_Setups = GetLoc("Module_Configure_Setups"); // "Setups:"
		internal static string Module_Configurable = GetLoc("Module_Configurable"); // "Configurable"
		internal static string Module_Resources = GetLoc("Module_Resources"); // "Resources"
		internal static string Module_Extra = GetLoc("Module_Extra"); // "Extra"
		internal static string Module_mass = GetLoc("Module_mass"); // "mass"
		internal static string Module_cost = GetLoc("Module_cost"); // "cost"

		////////////////////////////////////////////////////////////////////
		// Module : Comfort
		////////////////////////////////////////////////////////////////////
		internal static string Module_Comfort = GetLoc("Module_Comfort"); // "Comfort"
		internal static string Module_Comfort_Summary1 = GetLoc("Module_Comfort_Summary1"); // "ideal"
		internal static string Module_Comfort_Summary2 = GetLoc("Module_Comfort_Summary2"); // "good"
		internal static string Module_Comfort_Summary3 = GetLoc("Module_Comfort_Summary3"); // "modest"
		internal static string Module_Comfort_Summary4 = GetLoc("Module_Comfort_Summary4"); // "poor"
		internal static string Module_Comfort_Summary5 = GetLoc("Module_Comfort_Summary5"); // "none"

		////////////////////////////////////////////////////////////////////
		// Module : Experiment
		////////////////////////////////////////////////////////////////////
		internal static ParamString Module_Experiment_MultipleRunsMessage = new ParamString("Module_Experiment_MultipleRunsMessage"); // "Can't start <<1>> a second time on vessel <<2>>"
		internal static string Module_Experiment_Prepare = GetLoc("Module_Experiment_Prepare"); // "Prepare"
		internal static string Module_Experiment_Reset = GetLoc("Module_Experiment_Reset"); // "Reset"
		internal static string Module_Experiment_issue_title = GetLoc("Module_Experiment_issue_title"); // "issue"
		internal static string Module_Experiment_issue1 = GetLoc("Module_Experiment_issue1"); // "invalid situation"
		internal static string Module_Experiment_issue2 = GetLoc("Module_Experiment_issue2"); // "shrouded"
		internal static string Module_Experiment_issue3 = GetLoc("Module_Experiment_issue3"); // "reset required"
		internal static string Module_Experiment_issue4 = GetLoc("Module_Experiment_issue4"); // "no Electricity"
		internal static string Module_Experiment_issue5 = GetLoc("Module_Experiment_issue5"); // "crew on board"
		internal static string Module_Experiment_issue6 = GetLoc("Module_Experiment_issue6"); // "depleted"
		internal static string Module_Experiment_issue7 = GetLoc("Module_Experiment_issue7"); // "not prepared"
		internal static string Module_Experiment_issue8 = GetLoc("Module_Experiment_issue8"); // "background flight"
		internal static string Module_Experiment_issue9 = GetLoc("Module_Experiment_issue9"); // "unmet requirement"
		internal static string Module_Experiment_issue10 = GetLoc("Module_Experiment_issue10"); // "missing resource"
		internal static string Module_Experiment_issue11 = GetLoc("Module_Experiment_issue11"); // "no storage space"
		internal static ParamString Module_Experiment_issue12 = new ParamString("Module_Experiment_issue12"); // "missing <<1>>"
		internal static string Module_Experiment_runningstate1 = GetLoc("Module_Experiment_runningstate1"); // "stopped"
		internal static string Module_Experiment_runningstate2 = GetLoc("Module_Experiment_runningstate2"); // "started"
		internal static string Module_Experiment_runningstate3 = GetLoc("Module_Experiment_runningstate3"); // "forced run"
		internal static string Module_Experiment_runningstate4 = GetLoc("Module_Experiment_runningstate4"); // "broken"
		internal static string Module_Experiment_runningstate5 = GetLoc("Module_Experiment_runningstate5"); // "running"
		internal static string Module_Experiment_runningstate6 = GetLoc("Module_Experiment_runningstate6"); // "waiting"
		internal static string Module_Experiment_ScienceValuenone = GetLoc("Module_Experiment_ScienceValuenone"); // "none"
		internal static string Module_Experiment_Requires = GetLoc("Module_Experiment_Requires"); // "Requires:"
		internal static string Module_Experiment_Specifics_info1 = GetLoc("Module_Experiment_Specifics_info1"); // "Data size"
		internal static string Module_Experiment_Specifics_info2 = GetLoc("Module_Experiment_Specifics_info2"); // "Data rate"
		internal static string Module_Experiment_Specifics_info3 = GetLoc("Module_Experiment_Specifics_info3"); // "Duration"
		internal static string Module_Experiment_Specifics_info4 = GetLoc("Module_Experiment_Specifics_info4"); // "Sample size"
		internal static string Module_Experiment_Specifics_info5 = GetLoc("Module_Experiment_Specifics_info5"); // "Sample mass"
		internal static string Module_Experiment_Specifics_info6 = GetLoc("Module_Experiment_Specifics_info6"); // "Samples"
		internal static string Module_Experiment_Specifics_info7_sample = GetLoc("Module_Experiment_Specifics_info7_sample"); // "Duration"
		internal static string Module_Experiment_Specifics_Situations = GetLoc("Module_Experiment_Specifics_Situations"); // "Situations:"
		internal static string Module_Experiment_Specifics_info8 = GetLoc("Module_Experiment_Specifics_info8"); // "Needs:"
		internal static string Module_Experiment_Specifics_info9 = GetLoc("Module_Experiment_Specifics_info9"); // "EC"
		internal static string Module_Experiment_Specifics_info10 = GetLoc("Module_Experiment_Specifics_info10"); // "Preparation"
		internal static string Module_Experiment_Specifics_info10_none = GetLoc("Module_Experiment_Specifics_info10_none"); // "none"
		internal static string Module_Experiment_Specifics_info11 = GetLoc("Module_Experiment_Specifics_info11"); // "Operation"
		internal static string Module_Experiment_Specifics_info11_unmanned = GetLoc("Module_Experiment_Specifics_info11_unmanned"); // "unmanned"
		internal static string Module_Experiment_Specifics_info12 = GetLoc("Module_Experiment_Specifics_info12"); // "Reset"
		internal static string Module_Experiment_Specifics_info12_none = GetLoc("Module_Experiment_Specifics_info12_none"); // "none"
		internal static string Module_Experiment_MultipleRunsMessage_title = GetLoc("Module_Experiment_MultipleRunsMessage_title"); // "ALREADY RUNNING"																														
		internal static string Module_Experiment_Message1 = GetLoc("Module_Experiment_Message1"); // "I'm not qualified for this"
		internal static string Module_Experiment_Message2 = GetLoc("Module_Experiment_Message2"); // "I will not even know where to start"
		internal static string Module_Experiment_Message3 = GetLoc("Module_Experiment_Message3"); // "I'm afraid I can't do that"
		internal static string Module_Experiment_Message4 = GetLoc("Module_Experiment_Message4"); // "Preparation Complete"
		internal static string Module_Experiment_Message5 = GetLoc("Module_Experiment_Message5"); // "Ready to go"
		internal static string Module_Experiment_Message6 = GetLoc("Module_Experiment_Message6"); // "Let's start doing some science!"
		internal static string Module_Experiment_Message7 = GetLoc("Module_Experiment_Message7"); // "Reset Done"
		internal static string Module_Experiment_Message8 = GetLoc("Module_Experiment_Message8"); // "It's good to go again"
		internal static string Module_Experiment_Message9 = GetLoc("Module_Experiment_Message9"); // "Ready for the next bit of science"

		////////////////////////////////////////////////////////////////////
		// Module : Greenhouse
		////////////////////////////////////////////////////////////////////
		internal static ParamString Greenhouse_msg_1 = new ParamString("Greenhouse_msg_1"); // "On <<1>> "
		internal static ParamString Greenhouse_msg_2 = new ParamString("Greenhouse_msg_2"); // "harvest produced <<1>>"
		internal static ParamString Greenhouse_msg_3 = new ParamString("Greenhouse_msg_3"); // "emergency harvest produced <<1>>"
		internal static ParamString Greenhouse_resoucesmissing = new ParamString("Greenhouse_resoucesmissing"); // "missing <<1>>"
		internal static string Greenhouse = GetLoc("Greenhouse"); // "Greenhouse"
		static string Greenhouse_Action = GetLoc("Greenhouse_Action"); // "Enable/Disable Greenhouse"
		static string Greenhouse_EmergencyHarvest = GetLoc("Greenhouse_EmergencyHarvest"); // "Emergency Harvest"
		static string Greenhouse_Harvest = GetLoc("Greenhouse_Harvest"); // "Harvest"
		static string Greenhouse_status_artificial = GetLoc("Greenhouse_status_artificial"); // "Artificial lighting"
		static string Greenhouse_status_natural = GetLoc("Greenhouse_status_natural"); // "Natural lighting"
		static string Greenhouse_status_tta = GetLoc("Greenhouse_status_tta"); // "Time to harvest"
		internal static string Greenhouse_Greenhouse = GetLoc("Greenhouse_Greenhouse"); // "Greenhouse"
		internal static string Greenhouse_desc = GetLoc("Greenhouse_desc"); // "Grow crops in space and on the surface of celestial bodies, even far from the sun."
		internal static string Greenhouse_disabled = GetLoc("Greenhouse_disabled"); // "disabled"
		internal static string Greenhouse_enabled = GetLoc("Greenhouse_enabled"); // "enabled"																	
		internal static string Greenhouse_issue1 = GetLoc("Greenhouse_issue1"); // "insufficient lighting"
		internal static string Greenhouse_issue2 = GetLoc("Greenhouse_issue2"); // "insufficient pressure"
		internal static string Greenhouse_issue3 = GetLoc("Greenhouse_issue3"); // "excessive radiation"
		internal static string Greenhouse_info1 = GetLoc("Greenhouse_info1"); // "Harvest size"
		internal static string Greenhouse_info2 = GetLoc("Greenhouse_info2"); // "Harvest time"
		internal static string Greenhouse_info3 = GetLoc("Greenhouse_info3"); // "Lighting tolerance"
		internal static string Greenhouse_info4 = GetLoc("Greenhouse_info4"); // "Pressure tolerance"
		internal static string Greenhouse_info5 = GetLoc("Greenhouse_info5"); // "Radiation tolerance"
		internal static string Greenhouse_info6 = GetLoc("Greenhouse_info6"); // "Lamps EC rate"
		internal static string Greenhouse_info7 = GetLoc("Greenhouse_info7"); // "Required resources"
		internal static string Greenhouse_CarbonDioxide = GetLoc("Greenhouse_CarbonDioxide"); // "CarbonDioxide"
		internal static string Greenhouse_CarbonDioxide_desc = GetLoc("Greenhouse_CarbonDioxide_desc"); // "Crops can also use the CO2 in the atmosphere without a scrubber."
		internal static string Greenhouse_Byproducts = GetLoc("Greenhouse_Byproducts"); // "By-products"

		////////////////////////////////////////////////////////////////////
		// Module : Habitat
		////////////////////////////////////////////////////////////////////
		internal static ParamString Habitat_postmsg = new ParamString("Habitat_postmsg"); // "Can't disable <b><<1>> habitat</b> while crew is inside"
		internal static string Habitat = GetLoc("Habitat"); // "Habitat"
		static string Habitat_Action = GetLoc("Habitat_Action"); // "Enable/Disable Habitat"
		static string Habitat_Surface = GetLoc("Habitat_Surface"); // "Surface"
		static string Habitat_Volume = GetLoc("Habitat_Volume"); // "Volume"
		internal static string Habitat_pressurizing = GetLoc("Habitat_pressurizing"); // "pressurizing..."
		internal static string Habitat_depressurizing = GetLoc("Habitat_depressurizing"); // "depressurizing..."
		internal static string Habitat_inflating = GetLoc("Habitat_inflating"); // "inflating..."
		internal static string Habitat_deflating = GetLoc("Habitat_deflating"); // "deflating..."
		internal static string Habitat_info1 = GetLoc("Habitat_info1"); // "Volume"
		internal static string Habitat_info2 = GetLoc("Habitat_info2"); // "Surface"
		internal static string Habitat_info3 = GetLoc("Habitat_info3"); // "Pressurized"
		internal static string Habitat_yes = GetLoc("Habitat_yes"); // "yes"
		internal static string Habitat_no = GetLoc("Habitat_no"); // "no"
		internal static string Habitat_none = GetLoc("Habitat_none"); // "none"
		internal static string Habitat_info4 = GetLoc("Habitat_info4"); // "Inflatable"
		internal static string Habitat_info5 = GetLoc("Habitat_info5"); // "Added mass per crew"
		internal static string Habitat_Summary1 = GetLoc("Habitat_Summary1"); // "ideal"
		internal static string Habitat_Summary2 = GetLoc("Habitat_Summary2"); // "good"
		internal static string Habitat_Summary3 = GetLoc("Habitat_Summary3"); // "modest"
		internal static string Habitat_Summary4 = GetLoc("Habitat_Summary4"); // "poor"
		internal static string Habitat_Summary5 = GetLoc("Habitat_Summary5"); // "cramped"

		////////////////////////////////////////////////////////////////////
		// Module : HardDrive
		////////////////////////////////////////////////////////////////////
		internal static string HardDrive = GetLoc("HardDrive"); // "Hard Drive"
		static string HardDrive_StoreData = GetLoc("HardDrive_StoreData"); // "Store data"
		static string HardDrive_TakeData = GetLoc("HardDrive_TakeData"); // "Take data"
		static string HardDrive_TransferData = GetLoc("HardDrive_TransferData"); // "Transfer data here"
		static string HardDrive_DataCapacity = GetLoc("HardDrive_DataCapacity"); // "Data Capacity"
		static string HardDrive_SampleCapacity = GetLoc("HardDrive_SampleCapacity"); // "Sample Capacity"
		static string HardDrive_Capacity = GetLoc("HardDrive_Capacity"); // "Capacity"
		internal static string HardDrive_Data = GetLoc("HardDrive_Data"); // "Data"
		internal static string HardDrive_Dataempty = GetLoc("HardDrive_Dataempty"); // "empty"
		internal static string HardDrive_WARNING_title = GetLoc("HardDrive_WARNING_title"); // "WARNING: not evering copied"
		internal static string HardDrive_WARNING = GetLoc("HardDrive_WARNING"); // "Storage is at capacity"
		internal static string HardDrive_info1 = GetLoc("HardDrive_info1"); // "File capacity"
		internal static string HardDrive_info2 = GetLoc("HardDrive_info2"); // "Sample capacity"
		internal static string HardDrive_Capacityunlimited = GetLoc("HardDrive_Capacityunlimited"); // "unlimited"

		////////////////////////////////////////////////////////////////////
		// Module : GravityRing
		////////////////////////////////////////////////////////////////////
		static string GravityRing_Action = GetLoc("GravityRing_Action"); // "Deploy/Retract Ring"
		static string GravityRing_Toggle = GetLoc("GravityRing_Toggle"); // "Deploy"
		internal static string GravityRing_yes = GetLoc("GravityRing_yes"); // "yes"
		internal static string GravityRing_no = GetLoc("GravityRing_no"); // "no"
		internal static string GravityRing_info1 = GetLoc("GravityRing_info1"); // "bonus"
		internal static string GravityRing_info2 = GetLoc("GravityRing_info2"); // "deployable"

		////////////////////////////////////////////////////////////////////
		// Module : Harvester
		////////////////////////////////////////////////////////////////////
		internal static ParamString Harvester_generatedescription = new ParamString("Harvester_generatedescription"); // "Extract <<1>> from <<2>>"
		static string Harvester_Action = GetLoc("Harvester_Action"); // "Start/Stop Harvester"
		internal static string Harvester_running = GetLoc("Harvester_running"); // "running"
		internal static string Harvester_stopped = GetLoc("Harvester_stopped"); // "stopped"
		internal static string Harvester_none = GetLoc("Harvester_none"); // "none"
		internal static string Harvester_land_valid = GetLoc("Harvester_land_valid"); // "no ground contact"
		internal static string Harvester_ocean_valid = GetLoc("Harvester_ocean_valid"); // "not in ocean"
		internal static string Harvester_atmo_valid = GetLoc("Harvester_atmo_valid"); // "not in atmosphere"
		internal static string Harvester_space_valid = GetLoc("Harvester_space_valid"); // "not in space"
		internal static string Harvester_pressurebelow = GetLoc("Harvester_pressurebelow"); // "pressure below threshold"
		internal static string Harvester_abundancebelow = GetLoc("Harvester_abundancebelow"); // "abundance below threshold"																				
		static string Harvester_simulatedabundance = GetLoc("Harvester_simulatedabundance"); // "Simulate at abundance"
		internal static string Harvester_source1 = GetLoc("Harvester_source1"); // "the surface"
		internal static string Harvester_source2 = GetLoc("Harvester_source2"); // "the ocean"
		internal static string Harvester_source3 = GetLoc("Harvester_source3"); // "the atmosphere"
		internal static string Harvester_source4 = GetLoc("Harvester_source4"); // "space"
		internal static string Harvester_info1 = GetLoc("Harvester_info1"); // "type"
		internal static string Harvester_info2 = GetLoc("Harvester_info2"); // "resource"
		internal static string Harvester_info3 = GetLoc("Harvester_info3"); // "min abundance"
		internal static string Harvester_info4 = GetLoc("Harvester_info4"); // "min pressure"
		internal static string Harvester_info5 = GetLoc("Harvester_info5"); // "extraction rate"
		internal static string Harvester_info6 = GetLoc("Harvester_info6"); // "at abundance"
		internal static string Harvester_info7 = GetLoc("Harvester_info7"); // "ec consumption"

		////////////////////////////////////////////////////////////////////
		// Module : ScanSat
		////////////////////////////////////////////////////////////////////
		internal static ParamString Scansat_Scannerhalted_text = new ParamString("Scansat_Scannerhalted_text"); // "Scanner halted on <<1>>. No storage left on vessel."
		internal static ParamString Scansat_sensorresumed = new ParamString("Scansat_sensorresumed"); // "SCANsat sensor resumed operations on <<1>>"
		internal static ParamString Scansat_sensordisabled = new ParamString("Scansat_sensordisabled"); // "SCANsat sensor was disabled on <<1>>"
		internal static string Scansat_Scannerhalted = GetLoc("Scansat_Scannerhalted"); // "Scanner halted"

		////////////////////////////////////////////////////////////////////
		// Module : Laboratory
		////////////////////////////////////////////////////////////////////
		internal static ParamString Laboratory_Analyzed = new ParamString("Laboratory_Analyzed"); // "Our laboratory on <<1>> analyzed <<2>>"
		internal static string Laboratory_Title = GetLoc("Laboratory_Title"); // "Laboratory"
		internal static string Laboratory_Toggle = GetLoc("Laboratory_Toggle"); // "Toggle Lab"
		internal static string Laboratory_Clean = GetLoc("Laboratory_Clean"); // "Clean Lab"
		internal static string Laboratory_stopped = GetLoc("Laboratory_stopped"); // "stopped"
		internal static string Laboratory_Notspace = GetLoc("Laboratory_Notspace"); // "Not enough space on hard drive"
		internal static string Laboratory_Action = GetLoc("Laboratory_Action"); // "Enable/Disable Lab"
		internal static string Laboratory_NoEC = GetLoc("Laboratory_NoEC"); // "no electric charge"
		internal static string Laboratory_NoSample = GetLoc("Laboratory_NoSample"); // "no samples to analyze"
		internal static string Laboratory_Cleaned = GetLoc("Laboratory_Cleaned"); // "Vessel experiments have been cleaned."
		internal static string Laboratory_Specs = GetLoc("Laboratory_Specs"); // "Analyze samples to produce transmissible data"
		internal static string Laboratory_Researcher = GetLoc("Laboratory_Researcher"); // "Researcher"
		internal static string Laboratory_CanClean = GetLoc("Laboratory_CanClean"); // "Can clean experiments"
		internal static string Laboratory_ECrate = GetLoc("Laboratory_ECrate"); // "EC rate"
		internal static string Laboratory_rate = GetLoc("Laboratory_rate"); // "Analysis rate"
		internal static string Laboratory_Analysis = GetLoc("Laboratory_Analysis"); // "ANALYSIS COMPLETED"
		internal static string Laboratory_Results = GetLoc("Laboratory_Results"); // "The results can be transmitted now"
		internal static string Laboratory_Nostorage = GetLoc("Laboratory_Nostorage"); // "No storage available"

		////////////////////////////////////////////////////////////////////
		// Module : PassiveShield
		////////////////////////////////////////////////////////////////////
		internal static string PassiveShield_Sandbags = GetLoc("PassiveShield_Sandbags"); // "Sandbags"
		internal static string PassiveShield_fill = GetLoc("PassiveShield_fill"); // "fill"
		internal static string PassiveShield_empty = GetLoc("PassiveShield_empty"); // "empty"
		internal static string PassiveShield_stowed = GetLoc("PassiveShield_stowed"); // "stowed"
		internal static string PassiveShield_absorbing = GetLoc("PassiveShield_absorbing"); // "absorbing"
		internal static string PassiveShield_MessagePost = GetLoc("PassiveShield_MessagePost"); // "I don't know how this works!"

		////////////////////////////////////////////////////////////////////
		// Module : PlannerController
		////////////////////////////////////////////////////////////////////
		internal static string PlannerController_yes = GetLoc("PlannerController_yes"); // "yes"
		internal static string PlannerController_no = GetLoc("PlannerController_no"); // "no"

		////////////////////////////////////////////////////////////////////
		// Module : ProcessController
		////////////////////////////////////////////////////////////////////
		internal static string ProcessController_Start_Stop = GetLoc("ProcessController_Start_Stop"); // "Start/Stop"
		internal static string ProcessController_broken = GetLoc("ProcessController_broken"); // "broken"
		internal static string ProcessController_running = GetLoc("ProcessController_running"); // "running"
		internal static string ProcessController_stopped = GetLoc("ProcessController_stopped"); // "stopped"
		internal static string ProcessController_Dump = GetLoc("ProcessController_Dump"); // "Dump"
		internal static string ProcessController_info1 = GetLoc("ProcessController_info1"); // "Half-life"

		////////////////////////////////////////////////////////////////////
		// Module : Reliability
		////////////////////////////////////////////////////////////////////
		internal static ParamString Reliability_Inspect = new ParamString("Reliability_Inspect"); // "Inspect <<1>>"
		internal static ParamString Reliability_Repair = new ParamString("Reliability_Repair"); // "Repair <<1>>"
		internal static ParamString Reliability_Service = new ParamString("Reliability_Service"); // "Service <<1>>"
		internal static ParamString Reliability_qualityinfo = new ParamString("Reliability_qualityinfo"); // "<<1>> quality"
		internal static string Reliability_Reliability = GetLoc("Reliability_Reliability"); // "Reliability"
		internal static string Reliability_criticalfailure = GetLoc("Reliability_criticalfailure"); // "critical failure"
		internal static string Reliability_malfunction = GetLoc("Reliability_malfunction"); // "malfunction"
		internal static string Reliability_burnremaining = GetLoc("Reliability_burnremaining"); // "remaining burn:"
		internal static string Reliability_ignitions = GetLoc("Reliability_ignitions"); // "ignitions:"
		internal static string Reliability_takingradiationdamage = GetLoc("Reliability_takingradiationdamage"); // "taking radiation damage"
		internal static string Reliability_qualityhigh = GetLoc("Reliability_qualityhigh"); // "high"
		internal static string Reliability_qualitystandard = GetLoc("Reliability_qualitystandard"); // "standard"
		internal static string Reliability_MTBF = GetLoc("Reliability_MTBF"); // "MTBF:                //Mean Time Between Failures(I guess)"
		internal static string Reliability_Burntime = GetLoc("Reliability_Burntime"); // "Burn time:"
		internal static string Reliability_MessagePost1 = GetLoc("Reliability_MessagePost1"); // "It is practically new"
		internal static string Reliability_MessagePost2 = GetLoc("Reliability_MessagePost2"); // "It is in good shape"
		internal static string Reliability_MessagePost3 = GetLoc("Reliability_MessagePost3"); // "This will last for ages"
		internal static string Reliability_MessagePost4 = GetLoc("Reliability_MessagePost4"); // "Brand new!"
		internal static string Reliability_MessagePost5 = GetLoc("Reliability_MessagePost5"); // "Doesn't look used. Is this even turned on?"
		internal static string Reliability_MessagePost6 = GetLoc("Reliability_MessagePost6"); // "Looks like it's going to fall off soon."
		internal static string Reliability_MessagePost7 = GetLoc("Reliability_MessagePost7"); // "Better get the duck tape ready!"
		internal static string Reliability_MessagePost8 = GetLoc("Reliability_MessagePost8"); // "It is reaching its operational limits."
		internal static string Reliability_MessagePost9 = GetLoc("Reliability_MessagePost9"); // "How is this still working?"
		internal static string Reliability_MessagePost10 = GetLoc("Reliability_MessagePost10"); // "It could fail at any moment now."
		internal static string Reliability_MessagePost11 = GetLoc("Reliability_MessagePost11"); // "I'm not qualified for this"
		internal static string Reliability_MessagePost12 = GetLoc("Reliability_MessagePost12"); // "I will not even know where to start"
		internal static string Reliability_MessagePost13 = GetLoc("Reliability_MessagePost13"); // "I'm afraid I can't do that"
		internal static ParamString Reliability_MessagePost14 = new ParamString("Reliability_MessagePost14"); // "<<1>> repaired"
		internal static string Reliability_MessagePost15 = GetLoc("Reliability_MessagePost15"); // "A powerkick did the trick."
		internal static string Reliability_MessagePost16 = GetLoc("Reliability_MessagePost16"); // "Duct tape, is there something it can't fix?"
		internal static string Reliability_MessagePost17 = GetLoc("Reliability_MessagePost17"); // "Fully operational again."
		internal static string Reliability_MessagePost18 = GetLoc("Reliability_MessagePost18"); // "We are back in business."
		internal static ParamString Reliability_MessagePost19 = new ParamString("Reliability_MessagePost19"); // "<<1>> serviced"
		internal static string Reliability_MessagePost20 = GetLoc("Reliability_MessagePost20"); // "I don't know how this was still working."
		internal static string Reliability_MessagePost21 = GetLoc("Reliability_MessagePost21"); // "Fastened that loose screw."
		internal static string Reliability_MessagePost22 = GetLoc("Reliability_MessagePost22"); // "Someone forgot a toothpick in there."
		internal static string Reliability_MessagePost23 = GetLoc("Reliability_MessagePost23"); // "As good as new!"
		internal static ParamString Reliability_MessagePost24 = new ParamString("Reliability_MessagePost24"); // "<<1>> malfunctioned on <<2>>"
		internal static string Reliability_MessagePost25 = GetLoc("Reliability_MessagePost25"); // "We can still repair it"
		internal static ParamString Reliability_MessagePost26 = new ParamString("Reliability_MessagePost26"); // "<<1>> failed on <<2>>"
		internal static string Reliability_MessagePost27 = GetLoc("Reliability_MessagePost27"); // "It is gone for good"
		internal static ParamString Reliability_MessagePost28 = new ParamString("Reliability_MessagePost28"); // "There has been a problem with <<1>> on <<2>>"
		internal static string Reliability_MessagePost29 = GetLoc("Reliability_MessagePost29"); // "We were able to fix it remotely, this time"
		internal static string Reliability_info1 = GetLoc("Reliability_info1"); // "Redundancy"
		internal static string Reliability_info2 = GetLoc("Reliability_info2"); // "Repair"
		internal static string Reliability_info3 = GetLoc("Reliability_info3"); // "Standard quality"
		internal static string Reliability_info4 = GetLoc("Reliability_info4"); // "MTBF"
		internal static string Reliability_info5 = GetLoc("Reliability_info5"); // "Ignition failures"
		internal static string Reliability_info6 = GetLoc("Reliability_info6"); // "Rated burn duration"
		internal static string Reliability_info7 = GetLoc("Reliability_info7"); // "Rated ignitions"
		internal static string Reliability_info8 = GetLoc("Reliability_info8"); // "Radiation rating"
		internal static string Reliability_info9 = GetLoc("Reliability_info9"); // "High quality"
		internal static string Reliability_info10 = GetLoc("Reliability_info10"); // "Extra cost"
		internal static string Reliability_info11 = GetLoc("Reliability_info11"); // "Extra mass"

		////////////////////////////////////////////////////////////////////
		// Module : Sensor
		////////////////////////////////////////////////////////////////////
		internal static ParamString Sensor_insideatmosphere = new ParamString("Sensor_insideatmosphere"); // "inside <b>atmosphere</b>(<<1>>)"
		static string Sensor_info = GetLoc("Sensor_info"); // "Add telemetry readings to the part ui, and to the telemetry panel"
		internal static string Sensor_Type = GetLoc("Sensor_Type"); // "Type"
		internal static string Sensor_shorttextinfo1 = GetLoc("Sensor_shorttextinfo1"); // "nothing here"
		internal static string Sensor_shorttextinfo2 = GetLoc("Sensor_shorttextinfo2"); // "almost one"
		internal static string Sensor_shorttextinfo3 = GetLoc("Sensor_shorttextinfo3"); // "WOW!"
		internal static string Sensor_solarflux = GetLoc("Sensor_solarflux"); // "solar flux"
		internal static string Sensor_albedoflux = GetLoc("Sensor_albedoflux"); // "albedo flux"
		internal static string Sensor_bodyflux = GetLoc("Sensor_bodyflux"); // "body flux"
		internal static string Sensor_environment = GetLoc("Sensor_environment"); // "environment"
		internal static string Sensor_habitats = GetLoc("Sensor_habitats"); // "habitats"
		internal static string Sensor_insideocean = GetLoc("Sensor_insideocean"); // "inside <b>ocean</b>"
		internal static string Sensor_breathable = GetLoc("Sensor_breathable"); // "breathable"
		internal static string Sensor_notbreathable = GetLoc("Sensor_notbreathable"); // "not breathable"
		internal static string Sensor_insidethermosphere = GetLoc("Sensor_insidethermosphere"); // "inside <b>thermosphere</b>"
		internal static string Sensor_insideexosphere = GetLoc("Sensor_insideexosphere"); // "inside <b>exosphere</b>"
		internal static string Sensor_Graviolidetection = GetLoc("Sensor_Graviolidetection"); // "Gravioli detection events per-year: "
		internal static string Sensor_info1 = GetLoc("Sensor_info1"); // "The elusive negative gravioli particle\nseems to be much harder to detect than expected."
		internal static string Sensor_info2 = GetLoc("Sensor_info2"); // "On the other\nhand there seems to be plenty\nof useless positive graviolis around."

		////////////////////////////////////////////////////////////////////
		// Module : Sickbay
		////////////////////////////////////////////////////////////////////
		internal static ParamString Sickbay_cureEverybody = new ParamString("Sickbay_cureEverybody"); // "<<1>>: dismiss <<2>>" //<<2>> -> patientName
		internal static ParamString Sickbay_cureEverybody2 = new ParamString("Sickbay_cureEverybody2"); // "<<1>>: cure <<2>>"
		static string Sickbay_cure = GetLoc("Sickbay_cure"); // "cure"
		internal static string Sickbay_Start_Stop = GetLoc("Sickbay_Start_Stop"); // "Start/Stop"
		internal static string Sickbay_running = GetLoc("Sickbay_running"); // "running"
		internal static string Sickbay_stopped = GetLoc("Sickbay_stopped"); // "stopped"
		internal static string Sickbay_info1 = GetLoc("Sickbay_info1"); // "Cures"
		internal static string Sickbay_info2 = GetLoc("Sickbay_info2"); // "All kerbals in part"
		internal static string Sickbay_info3 = GetLoc("Sickbay_info3"); // "Capacity"
		internal static ParamString Sickbay_info4 = new ParamString("Sickbay_info4"); // "<<1>> Kerbals"

		////////////////////////////////////////////////////////////////////
		// Module : SolarPanelFixer
		////////////////////////////////////////////////////////////////////
		internal static ParamString SolarPanelFixer_occludedby = new ParamString("SolarPanelFixer_occludedby"); // "occluded by <<1>>"
		static string SolarPanelFixer_Solarpanel = GetLoc("SolarPanelFixer_Solarpanel"); // "Solar panel"
		static string SolarPanelFixer_Solarpaneloutput = GetLoc("SolarPanelFixer_Solarpaneloutput"); // "Solar panel output"
		static string SolarPanelFixer_simulated = GetLoc("SolarPanelFixer_simulated"); // "<color=#00ff00>simulated</color>"
		static string SolarPanelFixer_ignored = GetLoc("SolarPanelFixer_ignored"); // "<color=#ffff00>ignored</color>"
		internal static string SolarPanelFixer_inshadow = GetLoc("SolarPanelFixer_inshadow"); // "in shadow"
		internal static string SolarPanelFixer_occludedbyterrain = GetLoc("SolarPanelFixer_occludedbyterrain"); // "occluded by terrain"
		internal static string SolarPanelFixer_badorientation = GetLoc("SolarPanelFixer_badorientation"); // "bad orientation"
		internal static string SolarPanelFixer_analytic = GetLoc("SolarPanelFixer_analytic"); // "analytic"
		internal static string SolarPanelFixer_exposure = GetLoc("SolarPanelFixer_exposure"); // "exposure"
		internal static string SolarPanelFixer_wear = GetLoc("SolarPanelFixer_wear"); // "wear"
		internal static string SolarPanelFixer_Selecttrackedstar = GetLoc("SolarPanelFixer_Selecttrackedstar"); // "Select tracked star"
		internal static string SolarPanelFixer_SelectTrackingBody = GetLoc("SolarPanelFixer_SelectTrackingBody"); // "SelectTrackingBody"
		internal static string SolarPanelFixer_SelectTrackedstar_msg = GetLoc("SolarPanelFixer_SelectTrackedstar_msg"); // "Select the star you want to track with this solar panel."
		internal static string SolarPanelFixer_Automatic = GetLoc("SolarPanelFixer_Automatic"); // "Automatic"
		internal static string SolarPanelFixer_retracted = GetLoc("SolarPanelFixer_retracted"); // "retracted"
		internal static string SolarPanelFixer_extending = GetLoc("SolarPanelFixer_extending"); // "extending"
		internal static string SolarPanelFixer_retracting = GetLoc("SolarPanelFixer_retracting"); // "retracting"
		internal static string SolarPanelFixer_broken = GetLoc("SolarPanelFixer_broken"); // "broken"
		internal static string SolarPanelFixer_failure = GetLoc("SolarPanelFixer_failure"); // "failure"
		internal static string SolarPanelFixer_invalidstate = GetLoc("SolarPanelFixer_invalidstate"); // "invalid state"
		internal static string SolarPanelFixer_Trackedstar = GetLoc("SolarPanelFixer_Trackedstar"); // "Tracked star"
		internal static string SolarPanelFixer_AutoTrack = GetLoc("SolarPanelFixer_AutoTrack"); // "[Auto] : "

		////////////////////////////////////////////////////////////////////
		// Class : Callbacks
		////////////////////////////////////////////////////////////////////
		internal static ParamString CallBackMsg_EvaNoMP = new ParamString("CallBackMsg_EvaNoMP"); // "There isn't any <<1>> in the EVA suit"
		internal static string CallBackMsg_EvaNoMP2 = GetLoc("CallBackMsg_EvaNoMP2"); // "Don't let the ladder go!"
		internal static string CallBackMsg_PROGRESS = GetLoc("CallBackMsg_PROGRESS"); // "PROGRESS"
		internal static string CallBackMsg_PROGRESS2 = GetLoc("CallBackMsg_PROGRESS2"); // "Our scientists just made a breakthrough"

		////////////////////////////////////////////////////////////////////
		// Class : Preferences
		////////////////////////////////////////////////////////////////////
		internal static string Preferences_Reliability = GetLoc("Preferences_Reliability"); // "Reliability"
		static string HighlightMalfunctions = GetLoc("HighlightMalfunctions"); // "Highlight Malfunctions"
		static string HighlightMalfunctions_desc = GetLoc("HighlightMalfunctions_desc"); // "Highlight failed parts in flight"
		static string PartMalfunctions = GetLoc("PartMalfunctions"); // "Part Malfunctions"
		static string PartMalfunctions_desc = GetLoc("PartMalfunctions_desc"); // "Allow engine failures based on part age and mean time between failures"
		static string CriticalFailureRate = GetLoc("CriticalFailureRate"); // "Critical Failure Rate"
		static string CriticalFailureRate_desc = GetLoc("CriticalFailureRate_desc"); // "Proportion of malfunctions that lead to critical failures"
		static string FixableFailureRate = GetLoc("FixableFailureRate"); // "Fixable Failure Rate"
		static string FixableFailureRate_desc = GetLoc("FixableFailureRate_desc"); // "Proportion of malfunctions that can be fixed remotely"
		static string IncentiveRedundancy = GetLoc("IncentiveRedundancy"); // "Incentive Redundancy"
		static string IncentiveRedundancy_desc = GetLoc("IncentiveRedundancy_desc"); // "Each malfunction will increase the MTBF\nof components in the same redundancy group"
		static string EngineMalfunctions = GetLoc("EngineMalfunctions"); // "Engine Malfunctions"
		static string EngineMalfunctions_desc = GetLoc("EngineMalfunctions_desc"); // "Allow engine failures on ignition and exceeded burn durations"
		static string EngineIgnitionFailureChance = GetLoc("EngineIgnitionFailureChance"); // "Engine Ignition Failure Chance"
		static string EngineIgnitionFailureChance_desc = GetLoc("EngineIgnitionFailureChance_desc"); // "Adjust the probability of engine failures on ignition"
		static string EngineBurnFailureChance = GetLoc("EngineBurnFailureChance"); // "Engine Burn Failure Chance"
		static string EngineBurnFailureChance_desc = GetLoc("EngineBurnFailureChance_desc"); // "Adjust the probability of an engine failure caused by excessive burn time"

		//
		internal static string Preferences_Science = GetLoc("Preferences_Science"); // "Science"
		static string TransmitScienceImmediately = GetLoc("TransmitScienceImmediately"); // "Transmit Science Immediately"
		static string TransmitScienceImmediately_desc = GetLoc("TransmitScienceImmediately_desc"); // "Automatically flag science files for transmission"
		static string AnalyzeSamplesImmediately = GetLoc("AnalyzeSamplesImmediately"); // "Analyze Samples Immediately"
		static string AnalyzeSamplesImmediately_desc = GetLoc("AnalyzeSamplesImmediately_desc"); // "Automatically flag samples for analysis in a lab"
		static string AntennaSpeed = GetLoc("AntennaSpeed"); // "Antenna Speed"
		static string AntennaSpeed_desc = GetLoc("AntennaSpeed_desc"); // "Antenna Bandwidth factor"
		static string Alwaysallowsampletransfers = GetLoc("Alwaysallowsampletransfers"); // "Always allow sample transfers"
		static string Alwaysallowsampletransfers_desc = GetLoc("Alwaysallowsampletransfers_desc"); // "When off, sample transfer is only available in crewed vessels"

		//
		internal static string Preferences_Notifications = GetLoc("Preferences_Notifications"); // "Notifications"
		static string ElectricalCharge = GetLoc("ElectricalCharge"); // "Electrical Charge"
		static string ElectricalCharge_desc = GetLoc("ElectricalCharge_desc"); // "Show a message when EC level is low\n(Preset, can be changed per vessel)"
		static string Supplies = GetLoc("Supplies"); // "Supplies"
		static string Supplies_desc = GetLoc("Supplies_desc"); // "Show a message when supply resources level is low\n(Preset, can be changed per vessel)"
		static string Signal = GetLoc("Signal"); // "Signal"
		static string Signal_desc = GetLoc("Signal_desc"); // "Show a message when signal is lost or obtained\n(Preset, can be changed per vessel)"
		static string Failures = GetLoc("Failures"); // "Failures"
		static string Failures_desc = GetLoc("Failures_desc"); // "Show a message when a components fail\n(Preset, can be changed per vessel)"
		static string SpaceWeather = GetLoc("SpaceWeather"); // "Space Weather"
		static string SpaceWeather_desc = GetLoc("SpaceWeather_desc"); // "Show a message for CME events\n(Preset, can be changed per vessel)"
		static string Scripts = GetLoc("Scripts"); // "Scripts"
		static string Scripts_desc = GetLoc("Scripts_desc"); // "Show a message when scripts are executed\n(Preset, can be changed per vessel)"
		static string StockMessages = GetLoc("StockMessages"); // "Stock Messages"
		static string StockMessages_desc = GetLoc("StockMessages_desc"); // "Use the stock message system instead of our own"
		static string MessageDuration = GetLoc("MessageDuration"); // "Message Duration"
		static string MessageDuration_desc = GetLoc("MessageDuration_desc"); // "Duration of messages on screen in seconds"

		//
		internal static string Preferences_Comfort = GetLoc("Preferences_Comfort"); // "Comfort"
		static string StressBreakdowns = GetLoc("StressBreakdowns"); // "Stress Breakdowns"
		static string StressBreakdowns_desc = GetLoc("StressBreakdowns_desc"); // "Kerbals can make mistakes when they're under stress"
		static string StressBreakdownProbability = GetLoc("StressBreakdownProbability"); // "Stress Breakdown Probability"
		static string StressBreakdownProbability_desc = GetLoc("StressBreakdownProbability_desc"); // "Probability of one stress induced mistake per year"
		static string IdealLivingSpace = GetLoc("IdealLivingSpace"); // "Ideal Living Space"
		static string IdealLivingSpace_desc = GetLoc("IdealLivingSpace_desc"); // "Ideal living space per-capita in m^3"
		static string FirmGroundFactor = GetLoc("FirmGroundFactor"); // "Firm Ground Factor"
		static string FirmGroundFactor_desc = GetLoc("FirmGroundFactor_desc"); // "Having something to walk on"
		static string ExerciseFactor = GetLoc("ExerciseFactor"); // "Exercise Factor"
		static string ExerciseFactor_desc = GetLoc("ExerciseFactor_desc"); // "Having a treadmill"
		static string SocialFactor = GetLoc("SocialFactor"); // "Social Factor"
		static string SocialFactor_desc = GetLoc("SocialFactor_desc"); // "Having more than one crew on a vessel"
		static string CallHomeFactor = GetLoc("CallHomeFactor"); // "Call Home Factor"
		static string CallHomeFactor_desc = GetLoc("CallHomeFactor_desc"); // "Having a way to communicate with Kerbin"
		static string PanoramaFactor = GetLoc("PanoramaFactor"); // "Panorama Factor"
		static string PanoramaFactor_desc = GetLoc("PanoramaFactor_desc"); // "Comfort factor for having a panorama window"
		static string PlantsFactor = GetLoc("PlantsFactor"); // "Plants Factor"
		static string PlantsFactor_desc = GetLoc("PlantsFactor_desc"); // "There is some comfort in tending to plants"

		//
		internal static string Preferences_Radiation = GetLoc("Preferences_Radiation"); // "Radiation"
		static string LifetimeRadiation = GetLoc("LifetimeRadiation"); // "Lifetime Radiation"
		static string LifetimeRadiation_desc = GetLoc("LifetimeRadiation_desc"); // "Do not reset radiation values for kerbals recovered on kerbin"
		static string Stormprobability = GetLoc("Stormprobability"); // "Storm probability"
		static string Stormprobability_desc = GetLoc("Stormprobability_desc"); // "Probability of solar storms"
		static string stormDurationHours = GetLoc("stormDurationHours"); // "Average storm duration (hours)"
		static string stormDurationHours_desc = GetLoc("stormDurationHours_desc"); // "Average duration of a sun storm in hours"
		static string stormRadiation = GetLoc("stormRadiation"); // "Average storm radiation rad/h"
		static string stormRadiation_desc = GetLoc("stormRadiation_desc"); // "Radiation during a solar storm"
		static string ShieldingEfficiency = GetLoc("ShieldingEfficiency"); // "Shielding Efficiency"
		static string ShieldingEfficiency_desc = GetLoc("ShieldingEfficiency_desc"); // "Proportion of radiation blocked by shielding (at max amount)"

		////////////////////////////////////////////////////////////////////
		// Planner UI
		////////////////////////////////////////////////////////////////////
		internal static string Harvests = GetLoc("Harvests"); // "Harvests"
		internal static string Planner_Targetbody = GetLoc("Planner_Targetbody"); // "Target body"
		internal static string Planner_SunlightNominal = GetLoc("Planner_SunlightNominal"); // "In sunlight\n<b>Nominal</b> solar panel output"
		internal static string Planner_SunlightSimulated = GetLoc("Planner_SunlightSimulated"); // "In sunlight\n<b>Estimated</b> solar panel output\n<i>Sunlight direction : look at the shadows !</i>"
		internal static string Planner_Shadow = GetLoc("Planner_Shadow"); // "In shadow"
		internal static string Planner_Targetsituation = GetLoc("Planner_Targetsituation"); // "Target situation"
		internal static string Planner_RenderQuote = GetLoc("Planner_RenderQuote"); // "In preparing for space, I have always found that\nplans are useless but planning is indispensable.\nWernher von Kerman"
		internal static string Planner_Source = GetLoc("Planner_Source"); // "Source"
		internal static string Planner_Flux = GetLoc("Planner_Flux"); // "Flux"
		internal static string Planner_Temp = GetLoc("Planner_Temp"); // "Temp"
		internal static string Planner_solar = GetLoc("Planner_solar"); // "solar"
		internal static string Planner_albedo = GetLoc("Planner_albedo"); // "albedo"
		internal static string Planner_body = GetLoc("Planner_body"); // "body"
		internal static string Planner_background = GetLoc("Planner_background"); // "background"
		internal static string Planner_total = GetLoc("Planner_total"); // "total"
		internal static string Planner_pressure = GetLoc("Planner_pressure"); // "pressure"
		internal static string Planner_temperature = GetLoc("Planner_temperature"); // "temperature"
		internal static string Planner_atmospheric = GetLoc("Planner_atmospheric"); // "atmospheric"
		internal static string Planner_difference = GetLoc("Planner_difference"); // "difference"
		internal static string Planner_difference_desc = GetLoc("Planner_difference_desc"); // "difference between external and survival temperature"
		internal static string Planner_atmosphere = GetLoc("Planner_atmosphere"); // "atmosphere"
		internal static string Planner_atmosphere_yes = GetLoc("Planner_atmosphere_yes"); // "yes"
		internal static string Planner_atmosphere_no = GetLoc("Planner_atmosphere_no"); // "no"
		internal static string Planner_shadowtime = GetLoc("Planner_shadowtime"); // "shadow time"
		internal static string Planner_shadowtime_desc = GetLoc("Planner_shadowtime_desc"); // "the time in shadow\nduring the orbit"
		internal static string Planner_ELECTRICCHARGE = GetLoc("Planner_ELECTRICCHARGE"); // "ELECTRIC CHARGE"
		internal static string Planner_storage = GetLoc("Planner_storage"); // "storage"
		internal static string Planner_consumed = GetLoc("Planner_consumed"); // "consumed"
		internal static string Planner_produced = GetLoc("Planner_produced"); // "produced"
		internal static string Planner_duration = GetLoc("Planner_duration"); // "duration"
		internal static string Planner_STRESS = GetLoc("Planner_STRESS"); // "STRESS"
		internal static string Planner_volumepercapita = GetLoc("Planner_volumepercapita"); // "volume per-capita:"
		internal static string Planner_ideallivingspace = GetLoc("Planner_ideallivingspace"); // "ideal living space:"
		internal static string Planner_livingspace = GetLoc("Planner_livingspace"); // "living space"
		internal static string Planner_comfort = GetLoc("Planner_comfort"); // "comfort"
		internal static string Planner_analyzerpressurized1 = GetLoc("Planner_analyzerpressurized1"); // "Free roaming in a pressurized environment is\nvastly superior to living in a suit."
		internal static string Planner_analyzerpressurized2 = GetLoc("Planner_analyzerpressurized2"); // "Being forced inside a suit all the time greatly\nreduces the crews quality of life.\nThe worst part is the diaper."
		internal static string Planner_pressurized = GetLoc("Planner_pressurized"); // "pressurized"
		internal static string Planner_pressurized_yes = GetLoc("Planner_pressurized_yes"); // "yes"
		internal static string Planner_pressurized_no = GetLoc("Planner_pressurized_no"); // "no"
		internal static string Planner_lifeestimate = GetLoc("Planner_lifeestimate"); // "duration"
		internal static string Planner_surface = GetLoc("Planner_surface"); // "surface"
		internal static string Planner_magnetopause = GetLoc("Planner_magnetopause"); // "magnetopause"
		internal static string Planner_innerbelt = GetLoc("Planner_innerbelt"); // "inner belt"
		internal static string Planner_outerbelt = GetLoc("Planner_outerbelt"); // "outer belt"
		internal static string Planner_interplanetary = GetLoc("Planner_interplanetary"); // "interplanetary"
		internal static string Planner_interstellar = GetLoc("Planner_interstellar"); // "interstellar"
		internal static string Planner_storm = GetLoc("Planner_storm"); // "storm"
		internal static string Planner_RADIATION = GetLoc("Planner_RADIATION"); // "RADIATION"
		internal static string Planner_orbit = GetLoc("Planner_orbit"); // "orbit"
		internal static string Planner_emission = GetLoc("Planner_emission"); // "emission"
		internal static string Planner_activeshielding = GetLoc("Planner_activeshielding"); // "active shielding"
		internal static string Planner_shielding = GetLoc("Planner_shielding"); // "shielding"
		//traduce the redundancy metric to string
		internal static string Planner_none = GetLoc("Planner_none"); // "none"
		internal static string Planner_poor = GetLoc("Planner_poor"); // "poor"
		internal static string Planner_okay = GetLoc("Planner_okay"); // "okay"
		internal static string Planner_great = GetLoc("Planner_great"); // "great"
		internal static string Planner_engineer_tip = GetLoc("Planner_engineer_tip"); // "The engineer on board should\nbe able to handle all repairs"
		internal static string Planner_safemode_tip = GetLoc("Planner_safemode_tip"); // "We have a chance of repairing\nsome of the malfunctions remotely"
		internal static string Planner_RELIABILITY = GetLoc("Planner_RELIABILITY"); // "RELIABILITY"
		internal static string Planner_malfunctions = GetLoc("Planner_malfunctions"); // "malfunctions"
		internal static string Planner_malfunctions_tip = GetLoc("Planner_malfunctions_tip"); // "average case estimate\nfor the whole vessel"
		internal static string Planner_highquality = GetLoc("Planner_highquality"); // "high quality"
		internal static string Planner_highquality_tip = GetLoc("Planner_highquality_tip"); // "percentage of high quality components"
		internal static string Planner_redundancy = GetLoc("Planner_redundancy"); // "redundancy"
		internal static string Planner_repair = GetLoc("Planner_repair"); // "repair"
		internal static string Planner_scrubbingunnecessary = GetLoc("Planner_scrubbingunnecessary"); // "not required"
		internal static string Planner_noscrubbing = GetLoc("Planner_noscrubbing"); // "none"
		internal static string Planner_insufficientscrubbing = GetLoc("Planner_insufficientscrubbing"); // "inadequate"
		internal static string Planner_sufficientscrubbing = GetLoc("Planner_sufficientscrubbing"); // "good"
		internal static string Planner_pressurizationunnecessary = GetLoc("Planner_pressurizationunnecessary"); // "not required"
		internal static string Planner_nopressurecontrol = GetLoc("Planner_nopressurecontrol"); // "none"
		internal static string Planner_insufficientpressurecontrol = GetLoc("Planner_insufficientpressurecontrol"); // "inadequate"
		internal static string Planner_sufficientpressurecontrol = GetLoc("Planner_sufficientpressurecontrol"); // "good"
		internal static string Planner_HABITAT = GetLoc("Planner_HABITAT"); // "HABITAT"
		internal static string Planner_volume = GetLoc("Planner_volume"); // "volume"
		internal static string Planner_volume_tip = GetLoc("Planner_volume_tip"); // "volume of enabled habitats"
		internal static string Planner_habitatssurface = GetLoc("Planner_habitatssurface"); // "surface"
		internal static string Planner_habitatssurface_tip = GetLoc("Planner_habitatssurface_tip"); // "surface of enabled habitats"
		internal static string Planner_scrubbing = GetLoc("Planner_scrubbing"); // "scrubbing"
		internal static string Planner_pressurization = GetLoc("Planner_pressurization"); // "pressurization"

		////////////////////////////////////////////////////////////////////
		// Automation > Devices
		////////////////////////////////////////////////////////////////////
		internal static string Statu_unknown = GetLoc("Statu_unknown"); // "unknown"
		internal static string Antenna_statu_unknown = GetLoc("Antenna_statu_unknown"); // "unknown"
		internal static string Experiment_on = GetLoc("Experiment_on"); // "on                        //on partinfo.title"
		internal static string Experiment_status = GetLoc("Experiment_status"); // "status :"
		internal static string Experiment_issue = GetLoc("Experiment_issue"); // "issue :"
		internal static string Experiment_sciencevalue = GetLoc("Experiment_sciencevalue"); // "science value :"
		internal static string Experiment_completion = GetLoc("Experiment_completion"); // "completion :"
		internal static string SolarPanel_deployable = GetLoc("SolarPanel_deployable"); // "solar panel (deployable)"
		internal static string SolarPanel_nonretractable = GetLoc("SolarPanel_nonretractable"); // "solar panel (non retractable)"

		////////////////////////////////////////////////////////////////////
		// Class : Storm
		////////////////////////////////////////////////////////////////////
		internal static ParamString Storm_msg1 = new ParamString("Storm_msg1"); // "The coronal mass ejection hit <<1>> system"
		internal static ParamString Storm_msg2 = new ParamString("Storm_msg2"); // "Our observatories report a coronal mass ejection directed toward  <<1>> system"
		internal static ParamString Storm_msg3 = new ParamString("Storm_msg3"); // "The solar storm at <<1>> system is over"
		internal static ParamString Storm_msg4 = new ParamString("Storm_msg4"); // "The solar storm around <<1>> is over"
		internal static ParamString Storm_msg5 = new ParamString("Storm_msg5"); // "The coronal mass ejection hit <<1>>"
		internal static ParamString Storm_msg6 = new ParamString("Storm_msg6"); // "Our observatories report a coronal mass ejection directed toward <<1>>"
		internal static string Storm_msg1text = GetLoc("Storm_msg1text"); // "Storm duration:"
		internal static string Storm_msg2text = GetLoc("Storm_msg2text"); // "Time to impact:"

		////////////////////////////////////////////////////////////////////
		// Science > ExperimentInfo
		////////////////////////////////////////////////////////////////////
		internal static string ExperimentInfo_Unknown = GetLoc("ExperimentInfo_Unknown"); // "Unknown"
		internal static string Experimentinfo_Datasize = GetLoc("Experimentinfo_Datasize"); // "Data size"
		internal static string Experimentinfo_generatesample = GetLoc("Experimentinfo_generatesample"); // "Will generate a sample."
		internal static string Experimentinfo_Samplesize = GetLoc("Experimentinfo_Samplesize"); // "Sample size:"
		internal static string Experimentinfo_Samplemass = GetLoc("Experimentinfo_Samplemass"); // "Sample mass:"
		internal static string Experimentinfo_Situations = GetLoc("Experimentinfo_Situations"); // "Situations:\n"
		internal static string Experimentinfo_Asteroid = GetLoc("Experimentinfo_Asteroid"); // "Asteroid samples can be taken by kerbals on EVA"
		internal static string Experimentinfo_scannerarm = GetLoc("Experimentinfo_scannerarm"); // "Analyse with a scanner arm"
		internal static string Experimentinfo_smallRoc = GetLoc("Experimentinfo_smallRoc"); // "Collectable on EVA as a sample"
		internal static string Experimentinfo_smallRoc2 = GetLoc("Experimentinfo_smallRoc2"); // "Can't be collected on EVA"
		internal static ParamString Experimentinfo_smallRoc3 = new ParamString("Experimentinfo_smallRoc3"); // "Found on <<1>>'s :"
		internal static string Experimentinfo_Bodiesallowed = GetLoc("Experimentinfo_Bodiesallowed");// "Bodies allowed:"
		internal static string Experimentinfo_Bodiesnotallowed = GetLoc("Experimentinfo_Bodiesnotallowed");// "Bodies not allowed:"
		internal static string Experimentinfo_BodyCondition1 = GetLoc("Experimentinfo_BodyCondition1");// "atmospheric"
		internal static string Experimentinfo_BodyCondition2 = GetLoc("Experimentinfo_BodyCondition2");// "non-atmospheric"
		internal static string Experimentinfo_BodyCondition3 = GetLoc("Experimentinfo_BodyCondition3");// "gaseous"
		internal static string Experimentinfo_BodyCondition4 = GetLoc("Experimentinfo_BodyCondition4");// "solid"
		internal static string Experimentinfo_BodyCondition5 = GetLoc("Experimentinfo_BodyCondition5");// "oceanic"
		internal static string Experimentinfo_BodyCondition6 = GetLoc("Experimentinfo_BodyCondition6");// "home body"
		internal static string Experimentinfo_BodyCondition7 = GetLoc("Experimentinfo_BodyCondition7");// "home body and its moons"
		internal static string Experimentinfo_BodyCondition8 = GetLoc("Experimentinfo_BodyCondition8");// "planets"
		internal static string Experimentinfo_BodyCondition9 = GetLoc("Experimentinfo_BodyCondition9");// "moons"
		internal static string Experimentinfo_BodyCondition10 = GetLoc("Experimentinfo_BodyCondition10");// "suns"

		////////////////////////////////////////////////////////////////////
		// ???
		////////////////////////////////////////////////////////////////////
		//show warning message when a vessel cross a radiation belt
		internal static ParamString BeltWarnings_msg = new ParamString("BeltWarnings_msg"); // "<<1>> is crossing <<2>> radiation belt"
		// Remove Symmetry On Visible Resource Switch
		internal static ParamString RemoveSymmetry_msg = new ParamString("RemoveSymmetry_msg"); // "Symmetry on <<1>>\nhas been removed because of switching the <<2>> capacity."
		// Notify the user when crop can be harvested
		internal static ParamString harvestedready_msg = new ParamString("harvestedready_msg"); // "On <<1>> the crop is ready to be harvested"
		internal static string BeltWarnings_msgSubtext = GetLoc("BeltWarnings_msgSubtext"); // "Exposed to extreme radiation"
		internal static string Fittingparticles_msg = GetLoc("Fittingparticles_msg"); // "Fitting particles to signed distance fields"
		internal static string ComebackLater_msg = GetLoc("ComebackLater_msg"); // "Come back in a minute"

		// Kerbal belong to a rescue mission
		//eg. we found Bill Kerman He's still alive!
		internal static string Rescuemission_msg1 = GetLoc("Rescuemission_msg1"); // "We found"
		internal static string Kerbal_Male = GetLoc("Kerbal_Male"); // "He"
		internal static string Kerbal_Female = GetLoc("Kerbal_Female"); // "She"
		internal static string Rescuemission_msg2 = GetLoc("Rescuemission_msg2"); // "'s still alive!"

		//Messages muted Messages
		internal static string Messagesmuted = GetLoc("Messagesmuted"); // "Messages muted"
		internal static string Messagesmuted_subtext = GetLoc("Messagesmuted_subtext"); // "Be careful out there"
		internal static string Messagesunmuted = GetLoc("Messagesunmuted"); // "Messages unmuted"

		//Kerbal Breakdown messages
		internal static string Kerbalmumbling = GetLoc("Kerbalmumbling"); // "$ON_VESSEL$KERBAL has been in space for too long"
		internal static string Kerbalmumbling_subtext = GetLoc("Kerbalmumbling_subtext"); // "Mumbling incoherently"
		static string Kerbalfatfinger = GetLoc("Kerbalfatfinger"); // "$ON_VESSEL$KERBAL is pressing buttons at random on the control panel"
		internal static string Kerbalfatfinger_subtext = GetLoc("Kerbalfatfinger_subtext"); // "Science data has been lost"
		internal static string Kerbalrage = GetLoc("Kerbalrage"); // "$ON_VESSEL$KERBAL is possessed by a blind rage"
		internal static string Kerbalrage_subtext = GetLoc("Kerbalrage_subtext"); // "A component has been damaged"
		internal static string Kerbalwrongvalve = GetLoc("Kerbalwrongvalve"); // "$ON_VESSEL$KERBAL opened the wrong valve"
		internal static string Kerbalwrongvalve_subtext = GetLoc("Kerbalwrongvalve_subtext"); // "has been lost" //eg.[Resource Name] has been lost

		////////////////////////////////////////////////////////////////////
		// Science
		////////////////////////////////////////////////////////////////////
		//Science messages
		internal static string Scienctransmitted_title = GetLoc("Scienctransmitted_title"); // "transmitted"
		internal static string Nosciencegain = GetLoc("Nosciencegain"); // "no science gain : we already had this data"
		internal static string SciencresultText1 = GetLoc("SciencresultText1"); // "Our researchers will jump on it right now"
		internal static string SciencresultText2 = GetLoc("SciencresultText2"); // "This cause some excitement"
		internal static string SciencresultText3 = GetLoc("SciencresultText3"); // "These results are causing a brouhaha in R&D"
		internal static string SciencresultText4 = GetLoc("SciencresultText4"); // "Our scientists look very confused"
		internal static string SciencresultText5 = GetLoc("SciencresultText5"); // "The scientists won't believe these readings"

		//Science Situation
		internal static string Situation_None = GetLoc("Situation_None"); // "none"
		internal static string Situation_Landed = GetLoc("Situation_Landed"); // "landed"
		internal static string Situation_Splashed = GetLoc("Situation_Splashed"); // "splashed"
		internal static string Situation_Flyinglow = GetLoc("Situation_Flyinglow"); // "flying low"
		internal static string Situation_Flyinghigh = GetLoc("Situation_Flyinghigh"); // "flying high"
		internal static string Situation_Spacelow = GetLoc("Situation_Spacelow"); // "space low"
		internal static string Situation_SpaceHigh = GetLoc("Situation_SpaceHigh"); // "space high"
		internal static string Situation_Surface = GetLoc("Situation_Surface"); // "surface"
		internal static string Situation_Flying = GetLoc("Situation_Flying"); // "flying"
		internal static string Situation_Space = GetLoc("Situation_Space"); // "space"
		internal static string Situation_BodyGlobal = GetLoc("Situation_BodyGlobal"); // "global"
		internal static string Situation_biomes = GetLoc("Situation_biomes"); // "(biomes)"

		//Virtual Biome
		internal static string Situation_NoBiome = GetLoc("Situation_NoBiome"); // "global"
		internal static string Situation_NorthernHemisphere = GetLoc("Situation_NorthernHemisphere"); // "north hemisphere"
		internal static string Situation_SouthernHemisphere = GetLoc("Situation_SouthernHemisphere"); // "south hemisphere"
		internal static string Situation_InnerBelt = GetLoc("Situation_InnerBelt"); // "inner belt"
		internal static string Situation_OuterBelt = GetLoc("Situation_OuterBelt"); // "outer belt"
		internal static string Situation_Magnetosphere = GetLoc("Situation_Magnetosphere"); // "magnetosphere"
		internal static string Situation_Interstellar = GetLoc("Situation_Interstellar"); // "interstellar"
		internal static string Situation_Reentry = GetLoc("Situation_Reentry"); // "reentry"
		internal static string Situation_Storm = GetLoc("Situation_Storm"); // "solar storm"

		//Log Manager
		internal static string LogMan_LOGS = GetLoc("LogMan_LOGS"); // "LOGS"
		internal static string LogMan_ALLLOGS = GetLoc("LogMan_ALLLOGS"); // "ALL LOGS"
		internal static string LogMan_nologs = GetLoc("LogMan_nologs"); // "no logs"
		internal static string LogMan_ALERT = GetLoc("LogMan_ALERT"); // "ALERT\u0020\u0020\u0020"

		//Flight Logger
		internal static ParamString FlightLogger_MaterialFatigue = new ParamString("FlightLogger_MaterialFatigue"); // "<<1>> failed because of material fatigue"
		internal static ParamString FlightLogger_Destruction = new ParamString("FlightLogger_Destruction"); // "<<1>> fuel system leak caused destruction of the engine"
		internal static ParamString FlightLogger_Ignition = new ParamString("FlightLogger_Ignition"); // "<<1>> failure on ignition"

		//Experiment required
		internal static string ExperimentReq_OrbitMinInclination = GetLoc("ExperimentReq_OrbitMinInclination"); // "Min. inclination "
		internal static string ExperimentReq_OrbitMaxInclination = GetLoc("ExperimentReq_OrbitMaxInclination"); // "Max. inclination "
		internal static string ExperimentReq_OrbitMinEccentricity = GetLoc("ExperimentReq_OrbitMinEccentricity"); // "Min. eccentricity "
		internal static string ExperimentReq_OrbitMaxEccentricity = GetLoc("ExperimentReq_OrbitMaxEccentricity"); // "Max. eccentricity "
		internal static string ExperimentReq_OrbitMinArgOfPeriapsis = GetLoc("ExperimentReq_OrbitMinArgOfPeriapsis"); // "Min. argument of Pe "
		internal static string ExperimentReq_OrbitMaxArgOfPeriapsis = GetLoc("ExperimentReq_OrbitMaxArgOfPeriapsis"); // "Max. argument of Pe "
		internal static string ExperimentReq_TemperatureMin = GetLoc("ExperimentReq_TemperatureMin"); // "Min. temperature "
		internal static string ExperimentReq_TemperatureMax = GetLoc("ExperimentReq_TemperatureMax"); // "Max. temperature "
		internal static string ExperimentReq_AltitudeMin = GetLoc("ExperimentReq_AltitudeMin"); // "Min. altitude "
		internal static string ExperimentReq_AltitudeMax = GetLoc("ExperimentReq_AltitudeMax"); // "Max. altitude "
		internal static string ExperimentReq_RadiationMin = GetLoc("ExperimentReq_RadiationMin"); // "Min. radiation "
		internal static string ExperimentReq_RadiationMax = GetLoc("ExperimentReq_RadiationMax"); // "Max. radiation "
		internal static string ExperimentReq_VolumePerCrewMin = GetLoc("ExperimentReq_VolumePerCrewMin"); // "Min. vol./crew "
		internal static string ExperimentReq_VolumePerCrewMax = GetLoc("ExperimentReq_VolumePerCrewMax"); // "Max. vol./crew "
		internal static string ExperimentReq_SunAngleMin = GetLoc("ExperimentReq_SunAngleMin"); // "Min sun-surface angle"
		internal static string ExperimentReq_SunAngleMax = GetLoc("ExperimentReq_SunAngleMax"); // "Max sun-surface angle"
		internal static string ExperimentReq_SurfaceSpeedMin = GetLoc("ExperimentReq_SurfaceSpeedMin"); // "Min. surface speed "
		internal static string ExperimentReq_SurfaceSpeedMax = GetLoc("ExperimentReq_SurfaceSpeedMax"); // "Max. surface speed "
		internal static string ExperimentReq_VerticalSpeedMin = GetLoc("ExperimentReq_VerticalSpeedMin"); // "Min. vertical speed "
		internal static string ExperimentReq_VerticalSpeedMax = GetLoc("ExperimentReq_VerticalSpeedMax"); // "Max. vertical speed "
		internal static string ExperimentReq_SpeedMin = GetLoc("ExperimentReq_SpeedMin"); // "Min. speed "
		internal static string ExperimentReq_SpeedMax = GetLoc("ExperimentReq_SpeedMax"); // "Max. speed "
		internal static string ExperimentReq_DynamicPressureMin = GetLoc("ExperimentReq_DynamicPressureMin"); // "Min dynamic pressure"
		internal static string ExperimentReq_DynamicPressureMax = GetLoc("ExperimentReq_DynamicPressureMax"); // "Max dynamic pressure"
		internal static string ExperimentReq_StaticPressureMin = GetLoc("ExperimentReq_StaticPressureMin"); // "Min. pressure "
		internal static string ExperimentReq_StaticPressureMax = GetLoc("ExperimentReq_StaticPressureMax"); // "Max. pressure "
		internal static string ExperimentReq_AtmDensityMin = GetLoc("ExperimentReq_AtmDensityMin"); // "Min. atm. density "
		internal static string ExperimentReq_AtmDensityMax = GetLoc("ExperimentReq_AtmDensityMax"); // "Max. atm. density "
		internal static string ExperimentReq_AltAboveGroundMin = GetLoc("ExperimentReq_AltAboveGroundMin"); // "Min ground altitude"
		internal static string ExperimentReq_AltAboveGroundMax = GetLoc("ExperimentReq_AltAboveGroundMax"); // "Max ground altitude"
		internal static string ExperimentReq_MaxAsteroidDistance = GetLoc("ExperimentReq_MaxAsteroidDistance"); // "Max asteroid distance"
		internal static string ExperimentReq_AtmosphereAltMin = GetLoc("ExperimentReq_AtmosphereAltMin"); // "Min atmosphere altitude "
		internal static string ExperimentReq_AtmosphereAltMax = GetLoc("ExperimentReq_AtmosphereAltMax"); // "Max atmosphere altitude "
		internal static string ExperimentReq_CrewMin = GetLoc("ExperimentReq_CrewMin"); // "Min. crew "
		internal static string ExperimentReq_CrewMax = GetLoc("ExperimentReq_CrewMax"); // "Max. crew "
		internal static string ExperimentReq_CrewCapacityMin = GetLoc("ExperimentReq_CrewCapacityMin"); // "Min. crew capacity "
		internal static string ExperimentReq_CrewCapacityMax = GetLoc("ExperimentReq_CrewCapacityMax"); // "Max. crew capacity "
		internal static string ExperimentReq_AstronautComplexLevelMin = GetLoc("ExperimentReq_AstronautComplexLevelMin"); // "Astronaut Complex min level "
		static string ExperimentReq_AstronautComplexLevelMax = GetLoc("ExperimentReq_AstronautComplexLevelMax"); // "Astronaut Complex max level "
		internal static string ExperimentReq_TrackingStationLevelMin = GetLoc("ExperimentReq_TrackingStationLevelMin"); // "Tracking Station min level "
		internal static string ExperimentReq_TrackingStationLevelMax = GetLoc("ExperimentReq_TrackingStationLevelMax"); // "Tracking Station max level "
		internal static string ExperimentReq_MissionControlLevelMin = GetLoc("ExperimentReq_MissionControlLevelMin"); // "Mission Control min level "
		internal static string ExperimentReq_MissionControlLevelMax = GetLoc("ExperimentReq_MissionControlLevelMax"); // "Mission Control max level "
		internal static string ExperimentReq_AdministrationLevelMin = GetLoc("ExperimentReq_AdministrationLevelMin"); // "Administration min level "
		internal static string ExperimentReq_AdministrationLevelMax = GetLoc("ExperimentReq_AdministrationLevelMax"); // "Administration max level "
		internal static string ExperimentReq_Part = GetLoc("ExperimentReq_Part"); // "Need part "
		internal static string ExperimentReq_Module = GetLoc("ExperimentReq_Module"); // "Need module "

		//Vessel Recovery Window
		internal static string VesselRecovery_title = GetLoc("VesselRecovery_title"); // "recovery "
		internal static string VesselRecovery_info = GetLoc("VesselRecovery_info"); // "SCIENCE RECOVERED "
		internal static string VesselRecovery_CREDITS = GetLoc("VesselRecovery_CREDITS"); // "CREDITS"
		internal static string VesselRecovery_OKbutton = GetLoc("VesselRecovery_OKbutton"); // "OK"

		//Statu Toggle
		internal static string StatuToggle_info = GetLoc("StatuToggle_info"); // "info"
		internal static string StatuToggle_Habitat = GetLoc("StatuToggle_Habitat"); // "Habitat"
		internal static ParamString StatuToggle_Simulate = new ParamString("StatuToggle_Simulate"); // "Simulate <<1>> in planner"

		//Antenna UI
		internal static string AntennaUI_unavailable = GetLoc("AntennaUI_unavailable"); // "unavailable"
		internal static string AntennaUI_deploying = GetLoc("AntennaUI_deploying"); // "deploying"
		internal static string AntennaUI_type1 = GetLoc("AntennaUI_type1"); // "internal antenna"
		internal static string AntennaUI_type2 = GetLoc("AntennaUI_type2"); // "direct antenna"
		internal static string AntennaUI_type3 = GetLoc("AntennaUI_type3"); // "relay antenna"

		//Data Transmitter info
		internal static string DataTransmitter_ECidle = GetLoc("DataTransmitter_ECidle"); // "EC (idle)"
		internal static string DataTransmitter_ECTX = GetLoc("DataTransmitter_ECTX"); // "EC (transmitting)"
		internal static string DataTransmitter_Maxspeed = GetLoc("DataTransmitter_Maxspeed"); // "Max. speed"

	}
}
